/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;
using System.Runtime.InteropServices;

namespace Vulkan
{
	unsafe public struct Offset2D
	{
		public Int32 X;
		public Int32 Y;
	}

	unsafe public struct Offset3D
	{
		public Int32 X;
		public Int32 Y;
		public Int32 Z;
	}

	unsafe public struct Extent2D
	{
		public UInt32 Width;
		public UInt32 Height;
	}

	unsafe public struct Extent3D
	{
		public UInt32 Width;
		public UInt32 Height;
		public UInt32 Depth;
	}

	unsafe public struct Viewport
	{
		public float X;
		public float Y;
		public float Width;
		public float Height;
		public float MinDepth;
		public float MaxDepth;
	}

	unsafe public struct Rect2D
	{
		public Offset2D Offset;
		public Extent2D Extent;
	}

	unsafe public struct Rect3D
	{
		public Offset3D Offset;
		public Extent3D Extent;
	}

	unsafe public struct ClearRect
	{
		public Rect2D Rect;
		public UInt32 BaseArrayLayer;
		public UInt32 LayerCount;
	}

	unsafe public struct ComponentMapping
	{
		public ComponentSwizzle R;
		public ComponentSwizzle G;
		public ComponentSwizzle B;
		public ComponentSwizzle A;
	}

	unsafe public class PhysicalDeviceProperties
	{
		internal Interop.PhysicalDeviceProperties* m;

		public PhysicalDeviceProperties ()
		{
			m = (Interop.PhysicalDeviceProperties*) Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceProperties));
		}

		public UInt32 ApiVersion {
			get { return m->ApiVersion; }
			set { m->ApiVersion = value; }
		}

		public UInt32 DriverVersion {
			get { return m->DriverVersion; }
			set { m->DriverVersion = value; }
		}

		public UInt32 VendorID {
			get { return m->VendorID; }
			set { m->VendorID = value; }
		}

		public UInt32 DeviceID {
			get { return m->DeviceID; }
			set { m->DeviceID = value; }
		}

		public PhysicalDeviceType DeviceType {
			get { return m->DeviceType; }
			set { m->DeviceType = value; }
		}

		public string DeviceName {
			get { return Marshal.PtrToStringAnsi ((IntPtr)m->DeviceName); }
			set { Interop.Structure.MarshalFixedSizeString (m->DeviceName, value, 256); }
		}

		public Byte PipelineCacheUUID {
			get { return m->PipelineCacheUUID; }
			set { m->PipelineCacheUUID = value; }
		}

		PhysicalDeviceLimits lLimits;
		public PhysicalDeviceLimits Limits {
			get { return lLimits; }
			set { lLimits = value; m->Limits = (IntPtr)value.m; }
		}

		public PhysicalDeviceSparseProperties SparseProperties {
			get { return m->SparseProperties; }
			set { m->SparseProperties = value; }
		}
	}

	unsafe public class ExtensionProperties
	{
		internal Interop.ExtensionProperties* m;

		public ExtensionProperties ()
		{
			m = (Interop.ExtensionProperties*) Interop.Structure.Allocate (typeof (Interop.ExtensionProperties));
		}

		public string ExtensionName {
			get { return Marshal.PtrToStringAnsi ((IntPtr)m->ExtensionName); }
			set { Interop.Structure.MarshalFixedSizeString (m->ExtensionName, value, 256); }
		}

		public UInt32 SpecVersion {
			get { return m->SpecVersion; }
			set { m->SpecVersion = value; }
		}
	}

	unsafe public class LayerProperties
	{
		internal Interop.LayerProperties* m;

		public LayerProperties ()
		{
			m = (Interop.LayerProperties*) Interop.Structure.Allocate (typeof (Interop.LayerProperties));
		}

		public string LayerName {
			get { return Marshal.PtrToStringAnsi ((IntPtr)m->LayerName); }
			set { Interop.Structure.MarshalFixedSizeString (m->LayerName, value, 256); }
		}

		public UInt32 SpecVersion {
			get { return m->SpecVersion; }
			set { m->SpecVersion = value; }
		}

		public UInt32 ImplementationVersion {
			get { return m->ImplementationVersion; }
			set { m->ImplementationVersion = value; }
		}

		public string Description {
			get { return Marshal.PtrToStringAnsi ((IntPtr)m->Description); }
			set { Interop.Structure.MarshalFixedSizeString (m->Description, value, 256); }
		}
	}

	unsafe public class ApplicationInfo
	{
		internal Interop.ApplicationInfo* m;

		public ApplicationInfo ()
		{
			m = (Interop.ApplicationInfo*) Interop.Structure.Allocate (typeof (Interop.ApplicationInfo));
			m->SType = StructureType.ApplicationInfo;
		}

		public string ApplicationName {
			get { return Marshal.PtrToStringAnsi (m->ApplicationName); }
			set { m->ApplicationName = Marshal.StringToHGlobalAnsi (value); }
		}

		public UInt32 ApplicationVersion {
			get { return m->ApplicationVersion; }
			set { m->ApplicationVersion = value; }
		}

		public string EngineName {
			get { return Marshal.PtrToStringAnsi (m->EngineName); }
			set { m->EngineName = Marshal.StringToHGlobalAnsi (value); }
		}

		public UInt32 EngineVersion {
			get { return m->EngineVersion; }
			set { m->EngineVersion = value; }
		}

		public UInt32 ApiVersion {
			get { return m->ApiVersion; }
			set { m->ApiVersion = value; }
		}
	}

	unsafe public class AllocationCallbacks
	{
		internal Interop.AllocationCallbacks* m;

		public AllocationCallbacks ()
		{
			m = (Interop.AllocationCallbacks*) Interop.Structure.Allocate (typeof (Interop.AllocationCallbacks));
		}

		public IntPtr UserData {
			get { return m->UserData; }
			set { m->UserData = value; }
		}

		public IntPtr PfnAllocation {
			get { return m->PfnAllocation; }
			set { m->PfnAllocation = value; }
		}

		public IntPtr PfnReallocation {
			get { return m->PfnReallocation; }
			set { m->PfnReallocation = value; }
		}

		public IntPtr PfnFree {
			get { return m->PfnFree; }
			set { m->PfnFree = value; }
		}

		public IntPtr PfnInternalAllocation {
			get { return m->PfnInternalAllocation; }
			set { m->PfnInternalAllocation = value; }
		}

		public IntPtr PfnInternalFree {
			get { return m->PfnInternalFree; }
			set { m->PfnInternalFree = value; }
		}
	}

	unsafe public class DeviceQueueCreateInfo
	{
		internal Interop.DeviceQueueCreateInfo* m;

		public DeviceQueueCreateInfo ()
		{
			m = (Interop.DeviceQueueCreateInfo*) Interop.Structure.Allocate (typeof (Interop.DeviceQueueCreateInfo));
			m->SType = StructureType.DeviceQueueCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 QueueFamilyIndex {
			get { return m->QueueFamilyIndex; }
			set { m->QueueFamilyIndex = value; }
		}

		public UInt32 QueueCount {
			get { return m->QueueCount; }
			set { m->QueueCount = value; }
		}

		public float[] QueuePriorities {
			get {
				var values = new float [m->QueueCount];
				unsafe
				{
					float* ptr = (float*)m->QueuePriorities;
					for (int i = 0; i < m->QueueCount; i++)
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				m->QueueCount = (uint)value.Length;
				m->QueuePriorities = Marshal.AllocHGlobal ((int)(sizeof(float)*m->QueueCount));
				unsafe
				{
					float* ptr = (float*)m->QueuePriorities;
					for (int i = 0; i < m->QueueCount; i++)
						ptr [i] = value [i];
				}
			}
		}
	}

	unsafe public class DeviceCreateInfo
	{
		internal Interop.DeviceCreateInfo* m;

		public DeviceCreateInfo ()
		{
			m = (Interop.DeviceCreateInfo*) Interop.Structure.Allocate (typeof (Interop.DeviceCreateInfo));
			m->SType = StructureType.DeviceCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 QueueCreateInfoCount {
			get { return m->QueueCreateInfoCount; }
			set { m->QueueCreateInfoCount = value; }
		}

		DeviceQueueCreateInfo lQueueCreateInfos;
		public DeviceQueueCreateInfo QueueCreateInfos {
			get { return lQueueCreateInfos; }
			set { lQueueCreateInfos = value; m->QueueCreateInfos = (IntPtr)value.m; }
		}

		public UInt32 EnabledLayerCount {
			get { return m->EnabledLayerCount; }
			set { m->EnabledLayerCount = value; }
		}

		public string[] EnabledLayerNames {
			get {
				var strings = new string [m->EnabledLayerCount];
				unsafe
				{
					void** ptr = (void**)m->EnabledLayerNames;
					for (int i = 0; i < m->EnabledLayerCount; i++)
						strings [i] = Marshal.PtrToStringAnsi ((IntPtr)ptr [i]);
				}
				return strings;
			}

			set {
				m->EnabledLayerCount = (uint)value.Length;
				m->EnabledLayerNames = Marshal.AllocHGlobal ((int)(sizeof(IntPtr)*m->EnabledLayerCount));
				unsafe
				{
					void** ptr = (void**)m->EnabledLayerNames;
					for (int i = 0; i < m->EnabledLayerCount; i++)
						ptr [i] = (void*) Marshal.StringToHGlobalAnsi (value [i]);
				}
			}
		}

		public UInt32 EnabledExtensionCount {
			get { return m->EnabledExtensionCount; }
			set { m->EnabledExtensionCount = value; }
		}

		public string[] EnabledExtensionNames {
			get {
				var strings = new string [m->EnabledExtensionCount];
				unsafe
				{
					void** ptr = (void**)m->EnabledExtensionNames;
					for (int i = 0; i < m->EnabledExtensionCount; i++)
						strings [i] = Marshal.PtrToStringAnsi ((IntPtr)ptr [i]);
				}
				return strings;
			}

			set {
				m->EnabledExtensionCount = (uint)value.Length;
				m->EnabledExtensionNames = Marshal.AllocHGlobal ((int)(sizeof(IntPtr)*m->EnabledExtensionCount));
				unsafe
				{
					void** ptr = (void**)m->EnabledExtensionNames;
					for (int i = 0; i < m->EnabledExtensionCount; i++)
						ptr [i] = (void*) Marshal.StringToHGlobalAnsi (value [i]);
				}
			}
		}

		public PhysicalDeviceFeatures EnabledFeatures {
			get { return m->EnabledFeatures; }
			set { m->EnabledFeatures = value; }
		}
	}

	unsafe public class InstanceCreateInfo
	{
		internal Interop.InstanceCreateInfo* m;

		public InstanceCreateInfo ()
		{
			m = (Interop.InstanceCreateInfo*) Interop.Structure.Allocate (typeof (Interop.InstanceCreateInfo));
			m->SType = StructureType.InstanceCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		ApplicationInfo lApplicationInfo;
		public ApplicationInfo ApplicationInfo {
			get { return lApplicationInfo; }
			set { lApplicationInfo = value; m->ApplicationInfo = (IntPtr)value.m; }
		}

		public UInt32 EnabledLayerCount {
			get { return m->EnabledLayerCount; }
			set { m->EnabledLayerCount = value; }
		}

		public string[] EnabledLayerNames {
			get {
				var strings = new string [m->EnabledLayerCount];
				unsafe
				{
					void** ptr = (void**)m->EnabledLayerNames;
					for (int i = 0; i < m->EnabledLayerCount; i++)
						strings [i] = Marshal.PtrToStringAnsi ((IntPtr)ptr [i]);
				}
				return strings;
			}

			set {
				m->EnabledLayerCount = (uint)value.Length;
				m->EnabledLayerNames = Marshal.AllocHGlobal ((int)(sizeof(IntPtr)*m->EnabledLayerCount));
				unsafe
				{
					void** ptr = (void**)m->EnabledLayerNames;
					for (int i = 0; i < m->EnabledLayerCount; i++)
						ptr [i] = (void*) Marshal.StringToHGlobalAnsi (value [i]);
				}
			}
		}

		public UInt32 EnabledExtensionCount {
			get { return m->EnabledExtensionCount; }
			set { m->EnabledExtensionCount = value; }
		}

		public string[] EnabledExtensionNames {
			get {
				var strings = new string [m->EnabledExtensionCount];
				unsafe
				{
					void** ptr = (void**)m->EnabledExtensionNames;
					for (int i = 0; i < m->EnabledExtensionCount; i++)
						strings [i] = Marshal.PtrToStringAnsi ((IntPtr)ptr [i]);
				}
				return strings;
			}

			set {
				m->EnabledExtensionCount = (uint)value.Length;
				m->EnabledExtensionNames = Marshal.AllocHGlobal ((int)(sizeof(IntPtr)*m->EnabledExtensionCount));
				unsafe
				{
					void** ptr = (void**)m->EnabledExtensionNames;
					for (int i = 0; i < m->EnabledExtensionCount; i++)
						ptr [i] = (void*) Marshal.StringToHGlobalAnsi (value [i]);
				}
			}
		}
	}

	unsafe public struct QueueFamilyProperties
	{
		public UInt32 QueueFlags;
		public UInt32 QueueCount;
		public UInt32 TimestampValidBits;
		public Extent3D MinImageTransferGranularity;
	}

	unsafe public class PhysicalDeviceMemoryProperties
	{
		internal Interop.PhysicalDeviceMemoryProperties* m;

		public PhysicalDeviceMemoryProperties ()
		{
			m = (Interop.PhysicalDeviceMemoryProperties*) Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceMemoryProperties));
		}

		public UInt32 MemoryTypeCount {
			get { return m->MemoryTypeCount; }
			set { m->MemoryTypeCount = value; }
		}

		public MemoryType MemoryTypes {
			get { return m->MemoryTypes; }
			set { m->MemoryTypes = value; }
		}

		public UInt32 MemoryHeapCount {
			get { return m->MemoryHeapCount; }
			set { m->MemoryHeapCount = value; }
		}

		public MemoryHeap MemoryHeaps {
			get { return m->MemoryHeaps; }
			set { m->MemoryHeaps = value; }
		}
	}

	unsafe public class MemoryAllocateInfo
	{
		internal Interop.MemoryAllocateInfo* m;

		public MemoryAllocateInfo ()
		{
			m = (Interop.MemoryAllocateInfo*) Interop.Structure.Allocate (typeof (Interop.MemoryAllocateInfo));
			m->SType = StructureType.MemoryAllocateInfo;
		}

		public DeviceSize AllocationSize {
			get { return m->AllocationSize; }
			set { m->AllocationSize = value; }
		}

		public UInt32 MemoryTypeIndex {
			get { return m->MemoryTypeIndex; }
			set { m->MemoryTypeIndex = value; }
		}
	}

	unsafe public struct MemoryRequirements
	{
		public DeviceSize Size;
		public DeviceSize Alignment;
		public UInt32 MemoryTypeBits;
	}

	unsafe public struct SparseImageFormatProperties
	{
		public UInt32 AspectMask;
		public Extent3D ImageGranularity;
		public UInt32 Flags;
	}

	unsafe public struct SparseImageMemoryRequirements
	{
		public SparseImageFormatProperties FormatProperties;
		public UInt32 ImageMipTailFirstLod;
		public DeviceSize ImageMipTailSize;
		public DeviceSize ImageMipTailOffset;
		public DeviceSize ImageMipTailStride;
	}

	unsafe public struct MemoryType
	{
		public UInt32 PropertyFlags;
		public UInt32 HeapIndex;
	}

	unsafe public struct MemoryHeap
	{
		public DeviceSize Size;
		public UInt32 Flags;
	}

	unsafe public class MappedMemoryRange
	{
		internal Interop.MappedMemoryRange* m;

		public MappedMemoryRange ()
		{
			m = (Interop.MappedMemoryRange*) Interop.Structure.Allocate (typeof (Interop.MappedMemoryRange));
			m->SType = StructureType.MappedMemoryRange;
		}

		DeviceMemory lMemory;
		public DeviceMemory Memory {
			get { return lMemory; }
			set { lMemory = value; m->Memory = (UInt64)value.m; }
		}

		public DeviceSize Offset {
			get { return m->Offset; }
			set { m->Offset = value; }
		}

		public DeviceSize Size {
			get { return m->Size; }
			set { m->Size = value; }
		}
	}

	unsafe public struct FormatProperties
	{
		public UInt32 LinearTilingFeatures;
		public UInt32 OptimalTilingFeatures;
		public UInt32 BufferFeatures;
	}

	unsafe public struct ImageFormatProperties
	{
		public Extent3D MaxExtent;
		public UInt32 MaxMipLevels;
		public UInt32 MaxArrayLayers;
		public UInt32 SampleCounts;
		public DeviceSize MaxResourceSize;
	}

	unsafe public struct DescriptorBufferInfo
	{
		public UInt64 Buffer;
		public DeviceSize Offset;
		public DeviceSize Range;
	}

	unsafe public struct DescriptorImageInfo
	{
		public UInt64 Sampler;
		public UInt64 ImageView;
		public ImageLayout ImageLayout;
	}

	unsafe public class WriteDescriptorSet
	{
		internal Interop.WriteDescriptorSet* m;

		public WriteDescriptorSet ()
		{
			m = (Interop.WriteDescriptorSet*) Interop.Structure.Allocate (typeof (Interop.WriteDescriptorSet));
			m->SType = StructureType.WriteDescriptorSet;
		}

		DescriptorSet lDstSet;
		public DescriptorSet DstSet {
			get { return lDstSet; }
			set { lDstSet = value; m->DstSet = (UInt64)value.m; }
		}

		public UInt32 DstBinding {
			get { return m->DstBinding; }
			set { m->DstBinding = value; }
		}

		public UInt32 DstArrayElement {
			get { return m->DstArrayElement; }
			set { m->DstArrayElement = value; }
		}

		public UInt32 DescriptorCount {
			get { return m->DescriptorCount; }
			set { m->DescriptorCount = value; }
		}

		public DescriptorType DescriptorType {
			get { return m->DescriptorType; }
			set { m->DescriptorType = value; }
		}

		public DescriptorImageInfo ImageInfo {
			get { return m->ImageInfo; }
			set { m->ImageInfo = value; }
		}

		public DescriptorBufferInfo BufferInfo {
			get { return m->BufferInfo; }
			set { m->BufferInfo = value; }
		}

		BufferView lTexelBufferView;
		public BufferView TexelBufferView {
			get { return lTexelBufferView; }
			set { lTexelBufferView = value; m->TexelBufferView = (UInt64)value.m; }
		}
	}

	unsafe public class CopyDescriptorSet
	{
		internal Interop.CopyDescriptorSet* m;

		public CopyDescriptorSet ()
		{
			m = (Interop.CopyDescriptorSet*) Interop.Structure.Allocate (typeof (Interop.CopyDescriptorSet));
			m->SType = StructureType.CopyDescriptorSet;
		}

		DescriptorSet lSrcSet;
		public DescriptorSet SrcSet {
			get { return lSrcSet; }
			set { lSrcSet = value; m->SrcSet = (UInt64)value.m; }
		}

		public UInt32 SrcBinding {
			get { return m->SrcBinding; }
			set { m->SrcBinding = value; }
		}

		public UInt32 SrcArrayElement {
			get { return m->SrcArrayElement; }
			set { m->SrcArrayElement = value; }
		}

		DescriptorSet lDstSet;
		public DescriptorSet DstSet {
			get { return lDstSet; }
			set { lDstSet = value; m->DstSet = (UInt64)value.m; }
		}

		public UInt32 DstBinding {
			get { return m->DstBinding; }
			set { m->DstBinding = value; }
		}

		public UInt32 DstArrayElement {
			get { return m->DstArrayElement; }
			set { m->DstArrayElement = value; }
		}

		public UInt32 DescriptorCount {
			get { return m->DescriptorCount; }
			set { m->DescriptorCount = value; }
		}
	}

	unsafe public class BufferCreateInfo
	{
		internal Interop.BufferCreateInfo* m;

		public BufferCreateInfo ()
		{
			m = (Interop.BufferCreateInfo*) Interop.Structure.Allocate (typeof (Interop.BufferCreateInfo));
			m->SType = StructureType.BufferCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public DeviceSize Size {
			get { return m->Size; }
			set { m->Size = value; }
		}

		public UInt32 Usage {
			get { return m->Usage; }
			set { m->Usage = value; }
		}

		public SharingMode SharingMode {
			get { return m->SharingMode; }
			set { m->SharingMode = value; }
		}

		public UInt32 QueueFamilyIndexCount {
			get { return m->QueueFamilyIndexCount; }
			set { m->QueueFamilyIndexCount = value; }
		}

		public UInt32[] QueueFamilyIndices {
			get {
				var values = new UInt32 [m->QueueFamilyIndexCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->QueueFamilyIndices;
					for (int i = 0; i < m->QueueFamilyIndexCount; i++)
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				m->QueueFamilyIndexCount = (uint)value.Length;
				m->QueueFamilyIndices = Marshal.AllocHGlobal ((int)(sizeof(UInt32)*m->QueueFamilyIndexCount));
				unsafe
				{
					UInt32* ptr = (UInt32*)m->QueueFamilyIndices;
					for (int i = 0; i < m->QueueFamilyIndexCount; i++)
						ptr [i] = value [i];
				}
			}
		}
	}

	unsafe public class BufferViewCreateInfo
	{
		internal Interop.BufferViewCreateInfo* m;

		public BufferViewCreateInfo ()
		{
			m = (Interop.BufferViewCreateInfo*) Interop.Structure.Allocate (typeof (Interop.BufferViewCreateInfo));
			m->SType = StructureType.BufferViewCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		Buffer lBuffer;
		public Buffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = (UInt64)value.m; }
		}

		public Format Format {
			get { return m->Format; }
			set { m->Format = value; }
		}

		public DeviceSize Offset {
			get { return m->Offset; }
			set { m->Offset = value; }
		}

		public DeviceSize Range {
			get { return m->Range; }
			set { m->Range = value; }
		}
	}

	unsafe public struct ImageSubresource
	{
		public UInt32 AspectMask;
		public UInt32 MipLevel;
		public UInt32 ArrayLayer;
	}

	unsafe public struct ImageSubresourceLayers
	{
		public UInt32 AspectMask;
		public UInt32 MipLevel;
		public UInt32 BaseArrayLayer;
		public UInt32 LayerCount;
	}

	unsafe public struct ImageSubresourceRange
	{
		public UInt32 AspectMask;
		public UInt32 BaseMipLevel;
		public UInt32 LevelCount;
		public UInt32 BaseArrayLayer;
		public UInt32 LayerCount;
	}

	unsafe public class MemoryBarrier
	{
		internal Interop.MemoryBarrier* m;

		public MemoryBarrier ()
		{
			m = (Interop.MemoryBarrier*) Interop.Structure.Allocate (typeof (Interop.MemoryBarrier));
			m->SType = StructureType.MemoryBarrier;
		}

		public UInt32 SrcAccessMask {
			get { return m->SrcAccessMask; }
			set { m->SrcAccessMask = value; }
		}

		public UInt32 DstAccessMask {
			get { return m->DstAccessMask; }
			set { m->DstAccessMask = value; }
		}
	}

	unsafe public class BufferMemoryBarrier
	{
		internal Interop.BufferMemoryBarrier* m;

		public BufferMemoryBarrier ()
		{
			m = (Interop.BufferMemoryBarrier*) Interop.Structure.Allocate (typeof (Interop.BufferMemoryBarrier));
			m->SType = StructureType.BufferMemoryBarrier;
		}

		public UInt32 SrcAccessMask {
			get { return m->SrcAccessMask; }
			set { m->SrcAccessMask = value; }
		}

		public UInt32 DstAccessMask {
			get { return m->DstAccessMask; }
			set { m->DstAccessMask = value; }
		}

		public UInt32 SrcQueueFamilyIndex {
			get { return m->SrcQueueFamilyIndex; }
			set { m->SrcQueueFamilyIndex = value; }
		}

		public UInt32 DstQueueFamilyIndex {
			get { return m->DstQueueFamilyIndex; }
			set { m->DstQueueFamilyIndex = value; }
		}

		Buffer lBuffer;
		public Buffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = (UInt64)value.m; }
		}

		public DeviceSize Offset {
			get { return m->Offset; }
			set { m->Offset = value; }
		}

		public DeviceSize Size {
			get { return m->Size; }
			set { m->Size = value; }
		}
	}

	unsafe public class ImageMemoryBarrier
	{
		internal Interop.ImageMemoryBarrier* m;

		public ImageMemoryBarrier ()
		{
			m = (Interop.ImageMemoryBarrier*) Interop.Structure.Allocate (typeof (Interop.ImageMemoryBarrier));
			m->SType = StructureType.ImageMemoryBarrier;
		}

		public UInt32 SrcAccessMask {
			get { return m->SrcAccessMask; }
			set { m->SrcAccessMask = value; }
		}

		public UInt32 DstAccessMask {
			get { return m->DstAccessMask; }
			set { m->DstAccessMask = value; }
		}

		public ImageLayout OldLayout {
			get { return m->OldLayout; }
			set { m->OldLayout = value; }
		}

		public ImageLayout NewLayout {
			get { return m->NewLayout; }
			set { m->NewLayout = value; }
		}

		public UInt32 SrcQueueFamilyIndex {
			get { return m->SrcQueueFamilyIndex; }
			set { m->SrcQueueFamilyIndex = value; }
		}

		public UInt32 DstQueueFamilyIndex {
			get { return m->DstQueueFamilyIndex; }
			set { m->DstQueueFamilyIndex = value; }
		}

		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = (UInt64)value.m; }
		}

		public ImageSubresourceRange SubresourceRange {
			get { return m->SubresourceRange; }
			set { m->SubresourceRange = value; }
		}
	}

	unsafe public class ImageCreateInfo
	{
		internal Interop.ImageCreateInfo* m;

		public ImageCreateInfo ()
		{
			m = (Interop.ImageCreateInfo*) Interop.Structure.Allocate (typeof (Interop.ImageCreateInfo));
			m->SType = StructureType.ImageCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public ImageType ImageType {
			get { return m->ImageType; }
			set { m->ImageType = value; }
		}

		public Format Format {
			get { return m->Format; }
			set { m->Format = value; }
		}

		public Extent3D Extent {
			get { return m->Extent; }
			set { m->Extent = value; }
		}

		public UInt32 MipLevels {
			get { return m->MipLevels; }
			set { m->MipLevels = value; }
		}

		public UInt32 ArrayLayers {
			get { return m->ArrayLayers; }
			set { m->ArrayLayers = value; }
		}

		public UInt32 Samples {
			get { return m->Samples; }
			set { m->Samples = value; }
		}

		public ImageTiling Tiling {
			get { return m->Tiling; }
			set { m->Tiling = value; }
		}

		public UInt32 Usage {
			get { return m->Usage; }
			set { m->Usage = value; }
		}

		public SharingMode SharingMode {
			get { return m->SharingMode; }
			set { m->SharingMode = value; }
		}

		public UInt32 QueueFamilyIndexCount {
			get { return m->QueueFamilyIndexCount; }
			set { m->QueueFamilyIndexCount = value; }
		}

		public UInt32[] QueueFamilyIndices {
			get {
				var values = new UInt32 [m->QueueFamilyIndexCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->QueueFamilyIndices;
					for (int i = 0; i < m->QueueFamilyIndexCount; i++)
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				m->QueueFamilyIndexCount = (uint)value.Length;
				m->QueueFamilyIndices = Marshal.AllocHGlobal ((int)(sizeof(UInt32)*m->QueueFamilyIndexCount));
				unsafe
				{
					UInt32* ptr = (UInt32*)m->QueueFamilyIndices;
					for (int i = 0; i < m->QueueFamilyIndexCount; i++)
						ptr [i] = value [i];
				}
			}
		}

		public ImageLayout InitialLayout {
			get { return m->InitialLayout; }
			set { m->InitialLayout = value; }
		}
	}

	unsafe public struct SubresourceLayout
	{
		public DeviceSize Offset;
		public DeviceSize Size;
		public DeviceSize RowPitch;
		public DeviceSize ArrayPitch;
		public DeviceSize DepthPitch;
	}

	unsafe public class ImageViewCreateInfo
	{
		internal Interop.ImageViewCreateInfo* m;

		public ImageViewCreateInfo ()
		{
			m = (Interop.ImageViewCreateInfo*) Interop.Structure.Allocate (typeof (Interop.ImageViewCreateInfo));
			m->SType = StructureType.ImageViewCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = (UInt64)value.m; }
		}

		public ImageViewType ViewType {
			get { return m->ViewType; }
			set { m->ViewType = value; }
		}

		public Format Format {
			get { return m->Format; }
			set { m->Format = value; }
		}

		public ComponentMapping Components {
			get { return m->Components; }
			set { m->Components = value; }
		}

		public ImageSubresourceRange SubresourceRange {
			get { return m->SubresourceRange; }
			set { m->SubresourceRange = value; }
		}
	}

	unsafe public struct BufferCopy
	{
		public DeviceSize SrcOffset;
		public DeviceSize DstOffset;
		public DeviceSize Size;
	}

	unsafe public struct SparseMemoryBind
	{
		public DeviceSize ResourceOffset;
		public DeviceSize Size;
		public UInt64 Memory;
		public DeviceSize MemoryOffset;
		public UInt32 Flags;
	}

	unsafe public struct SparseImageMemoryBind
	{
		public ImageSubresource Subresource;
		public Offset3D Offset;
		public Extent3D Extent;
		public UInt64 Memory;
		public DeviceSize MemoryOffset;
		public UInt32 Flags;
	}

	unsafe public class SparseBufferMemoryBindInfo
	{
		internal Interop.SparseBufferMemoryBindInfo* m;

		public SparseBufferMemoryBindInfo ()
		{
			m = (Interop.SparseBufferMemoryBindInfo*) Interop.Structure.Allocate (typeof (Interop.SparseBufferMemoryBindInfo));
		}

		Buffer lBuffer;
		public Buffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = (UInt64)value.m; }
		}

		public UInt32 BindCount {
			get { return m->BindCount; }
			set { m->BindCount = value; }
		}

		public SparseMemoryBind Binds {
			get { return m->Binds; }
			set { m->Binds = value; }
		}
	}

	unsafe public class SparseImageOpaqueMemoryBindInfo
	{
		internal Interop.SparseImageOpaqueMemoryBindInfo* m;

		public SparseImageOpaqueMemoryBindInfo ()
		{
			m = (Interop.SparseImageOpaqueMemoryBindInfo*) Interop.Structure.Allocate (typeof (Interop.SparseImageOpaqueMemoryBindInfo));
		}

		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = (UInt64)value.m; }
		}

		public UInt32 BindCount {
			get { return m->BindCount; }
			set { m->BindCount = value; }
		}

		public SparseMemoryBind Binds {
			get { return m->Binds; }
			set { m->Binds = value; }
		}
	}

	unsafe public class SparseImageMemoryBindInfo
	{
		internal Interop.SparseImageMemoryBindInfo* m;

		public SparseImageMemoryBindInfo ()
		{
			m = (Interop.SparseImageMemoryBindInfo*) Interop.Structure.Allocate (typeof (Interop.SparseImageMemoryBindInfo));
		}

		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = (UInt64)value.m; }
		}

		public UInt32 BindCount {
			get { return m->BindCount; }
			set { m->BindCount = value; }
		}

		public SparseImageMemoryBind Binds {
			get { return m->Binds; }
			set { m->Binds = value; }
		}
	}

	unsafe public class BindSparseInfo
	{
		internal Interop.BindSparseInfo* m;

		public BindSparseInfo ()
		{
			m = (Interop.BindSparseInfo*) Interop.Structure.Allocate (typeof (Interop.BindSparseInfo));
			m->SType = StructureType.BindSparseInfo;
		}

		public UInt32 WaitSemaphoreCount {
			get { return m->WaitSemaphoreCount; }
			set { m->WaitSemaphoreCount = value; }
		}

		Semaphore lWaitSemaphores;
		public Semaphore WaitSemaphores {
			get { return lWaitSemaphores; }
			set { lWaitSemaphores = value; m->WaitSemaphores = (UInt64)value.m; }
		}

		public UInt32 BufferBindCount {
			get { return m->BufferBindCount; }
			set { m->BufferBindCount = value; }
		}

		SparseBufferMemoryBindInfo lBufferBinds;
		public SparseBufferMemoryBindInfo BufferBinds {
			get { return lBufferBinds; }
			set { lBufferBinds = value; m->BufferBinds = (IntPtr)value.m; }
		}

		public UInt32 ImageOpaqueBindCount {
			get { return m->ImageOpaqueBindCount; }
			set { m->ImageOpaqueBindCount = value; }
		}

		SparseImageOpaqueMemoryBindInfo lImageOpaqueBinds;
		public SparseImageOpaqueMemoryBindInfo ImageOpaqueBinds {
			get { return lImageOpaqueBinds; }
			set { lImageOpaqueBinds = value; m->ImageOpaqueBinds = (IntPtr)value.m; }
		}

		public UInt32 ImageBindCount {
			get { return m->ImageBindCount; }
			set { m->ImageBindCount = value; }
		}

		SparseImageMemoryBindInfo lImageBinds;
		public SparseImageMemoryBindInfo ImageBinds {
			get { return lImageBinds; }
			set { lImageBinds = value; m->ImageBinds = (IntPtr)value.m; }
		}

		public UInt32 SignalSemaphoreCount {
			get { return m->SignalSemaphoreCount; }
			set { m->SignalSemaphoreCount = value; }
		}

		Semaphore lSignalSemaphores;
		public Semaphore SignalSemaphores {
			get { return lSignalSemaphores; }
			set { lSignalSemaphores = value; m->SignalSemaphores = (UInt64)value.m; }
		}
	}

	unsafe public struct ImageCopy
	{
		public ImageSubresourceLayers SrcSubresource;
		public Offset3D SrcOffset;
		public ImageSubresourceLayers DstSubresource;
		public Offset3D DstOffset;
		public Extent3D Extent;
	}

	unsafe public class ImageBlit
	{
		internal Interop.ImageBlit* m;

		public ImageBlit ()
		{
			m = (Interop.ImageBlit*) Interop.Structure.Allocate (typeof (Interop.ImageBlit));
		}

		public ImageSubresourceLayers SrcSubresource {
			get { return m->SrcSubresource; }
			set { m->SrcSubresource = value; }
		}

		public Offset3D SrcOffsets {
			get { return m->SrcOffsets; }
			set { m->SrcOffsets = value; }
		}

		public ImageSubresourceLayers DstSubresource {
			get { return m->DstSubresource; }
			set { m->DstSubresource = value; }
		}

		public Offset3D DstOffsets {
			get { return m->DstOffsets; }
			set { m->DstOffsets = value; }
		}
	}

	unsafe public struct BufferImageCopy
	{
		public DeviceSize BufferOffset;
		public UInt32 BufferRowLength;
		public UInt32 BufferImageHeight;
		public ImageSubresourceLayers ImageSubresource;
		public Offset3D ImageOffset;
		public Extent3D ImageExtent;
	}

	unsafe public struct ImageResolve
	{
		public ImageSubresourceLayers SrcSubresource;
		public Offset3D SrcOffset;
		public ImageSubresourceLayers DstSubresource;
		public Offset3D DstOffset;
		public Extent3D Extent;
	}

	unsafe public class ShaderModuleCreateInfo
	{
		internal Interop.ShaderModuleCreateInfo* m;

		public ShaderModuleCreateInfo ()
		{
			m = (Interop.ShaderModuleCreateInfo*) Interop.Structure.Allocate (typeof (Interop.ShaderModuleCreateInfo));
			m->SType = StructureType.ShaderModuleCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UIntPtr CodeSize {
			get { return m->CodeSize; }
			set { m->CodeSize = value; }
		}

		public UInt32[] Code {
			get {
				var values = new UInt32 [(uint)m->CodeSize];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->Code;
					for (int i = 0; i < (uint)m->CodeSize; i++)
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				m->CodeSize = (UIntPtr)value.Length;
				m->Code = Marshal.AllocHGlobal ((int)(sizeof(UInt32)*(uint)m->CodeSize));
				unsafe
				{
					UInt32* ptr = (UInt32*)m->Code;
					for (int i = 0; i < (uint)m->CodeSize; i++)
						ptr [i] = value [i];
				}
			}
		}
	}

	unsafe public class DescriptorSetLayoutBinding
	{
		internal Interop.DescriptorSetLayoutBinding* m;

		public DescriptorSetLayoutBinding ()
		{
			m = (Interop.DescriptorSetLayoutBinding*) Interop.Structure.Allocate (typeof (Interop.DescriptorSetLayoutBinding));
		}

		public UInt32 Binding {
			get { return m->Binding; }
			set { m->Binding = value; }
		}

		public DescriptorType DescriptorType {
			get { return m->DescriptorType; }
			set { m->DescriptorType = value; }
		}

		public UInt32 DescriptorCount {
			get { return m->DescriptorCount; }
			set { m->DescriptorCount = value; }
		}

		public UInt32 StageFlags {
			get { return m->StageFlags; }
			set { m->StageFlags = value; }
		}

		Sampler lImmutableSamplers;
		public Sampler ImmutableSamplers {
			get { return lImmutableSamplers; }
			set { lImmutableSamplers = value; m->ImmutableSamplers = (UInt64)value.m; }
		}
	}

	unsafe public class DescriptorSetLayoutCreateInfo
	{
		internal Interop.DescriptorSetLayoutCreateInfo* m;

		public DescriptorSetLayoutCreateInfo ()
		{
			m = (Interop.DescriptorSetLayoutCreateInfo*) Interop.Structure.Allocate (typeof (Interop.DescriptorSetLayoutCreateInfo));
			m->SType = StructureType.DescriptorSetLayoutCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 BindingCount {
			get { return m->BindingCount; }
			set { m->BindingCount = value; }
		}

		DescriptorSetLayoutBinding lBindings;
		public DescriptorSetLayoutBinding Bindings {
			get { return lBindings; }
			set { lBindings = value; m->Bindings = (IntPtr)value.m; }
		}
	}

	unsafe public struct DescriptorPoolSize
	{
		public DescriptorType Type;
		public UInt32 DescriptorCount;
	}

	unsafe public class DescriptorPoolCreateInfo
	{
		internal Interop.DescriptorPoolCreateInfo* m;

		public DescriptorPoolCreateInfo ()
		{
			m = (Interop.DescriptorPoolCreateInfo*) Interop.Structure.Allocate (typeof (Interop.DescriptorPoolCreateInfo));
			m->SType = StructureType.DescriptorPoolCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 MaxSets {
			get { return m->MaxSets; }
			set { m->MaxSets = value; }
		}

		public UInt32 PoolSizeCount {
			get { return m->PoolSizeCount; }
			set { m->PoolSizeCount = value; }
		}

		public DescriptorPoolSize PoolSizes {
			get { return m->PoolSizes; }
			set { m->PoolSizes = value; }
		}
	}

	unsafe public class DescriptorSetAllocateInfo
	{
		internal Interop.DescriptorSetAllocateInfo* m;

		public DescriptorSetAllocateInfo ()
		{
			m = (Interop.DescriptorSetAllocateInfo*) Interop.Structure.Allocate (typeof (Interop.DescriptorSetAllocateInfo));
			m->SType = StructureType.DescriptorSetAllocateInfo;
		}

		DescriptorPool lDescriptorPool;
		public DescriptorPool DescriptorPool {
			get { return lDescriptorPool; }
			set { lDescriptorPool = value; m->DescriptorPool = (UInt64)value.m; }
		}

		public UInt32 DescriptorSetCount {
			get { return m->DescriptorSetCount; }
			set { m->DescriptorSetCount = value; }
		}

		DescriptorSetLayout lSetLayouts;
		public DescriptorSetLayout SetLayouts {
			get { return lSetLayouts; }
			set { lSetLayouts = value; m->SetLayouts = (UInt64)value.m; }
		}
	}

	unsafe public struct SpecializationMapEntry
	{
		public UInt32 ConstantID;
		public UInt32 Offset;
		public UIntPtr Size;
	}

	unsafe public class SpecializationInfo
	{
		internal Interop.SpecializationInfo* m;

		public SpecializationInfo ()
		{
			m = (Interop.SpecializationInfo*) Interop.Structure.Allocate (typeof (Interop.SpecializationInfo));
		}

		public UInt32 MapEntryCount {
			get { return m->MapEntryCount; }
			set { m->MapEntryCount = value; }
		}

		public SpecializationMapEntry MapEntries {
			get { return m->MapEntries; }
			set { m->MapEntries = value; }
		}

		public UIntPtr DataSize {
			get { return m->DataSize; }
			set { m->DataSize = value; }
		}

		public IntPtr Data {
			get { return m->Data; }
			set { m->Data = value; }
		}
	}

	unsafe public class PipelineShaderStageCreateInfo
	{
		internal Interop.PipelineShaderStageCreateInfo* m;

		public PipelineShaderStageCreateInfo ()
		{
			m = (Interop.PipelineShaderStageCreateInfo*) Interop.Structure.Allocate (typeof (Interop.PipelineShaderStageCreateInfo));
			m->SType = StructureType.PipelineShaderStageCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 Stage {
			get { return m->Stage; }
			set { m->Stage = value; }
		}

		ShaderModule lModule;
		public ShaderModule Module {
			get { return lModule; }
			set { lModule = value; m->Module = (UInt64)value.m; }
		}

		public string Name {
			get { return Marshal.PtrToStringAnsi (m->Name); }
			set { m->Name = Marshal.StringToHGlobalAnsi (value); }
		}

		SpecializationInfo lSpecializationInfo;
		public SpecializationInfo SpecializationInfo {
			get { return lSpecializationInfo; }
			set { lSpecializationInfo = value; m->SpecializationInfo = (IntPtr)value.m; }
		}
	}

	unsafe public class ComputePipelineCreateInfo
	{
		internal Interop.ComputePipelineCreateInfo* m;

		public ComputePipelineCreateInfo ()
		{
			m = (Interop.ComputePipelineCreateInfo*) Interop.Structure.Allocate (typeof (Interop.ComputePipelineCreateInfo));
			m->SType = StructureType.ComputePipelineCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		PipelineShaderStageCreateInfo lStage;
		public PipelineShaderStageCreateInfo Stage {
			get { return lStage; }
			set { lStage = value; m->Stage = (IntPtr)value.m; }
		}

		PipelineLayout lLayout;
		public PipelineLayout Layout {
			get { return lLayout; }
			set { lLayout = value; m->Layout = (UInt64)value.m; }
		}

		Pipeline lBasePipelineHandle;
		public Pipeline BasePipelineHandle {
			get { return lBasePipelineHandle; }
			set { lBasePipelineHandle = value; m->BasePipelineHandle = (UInt64)value.m; }
		}

		public Int32 BasePipelineIndex {
			get { return m->BasePipelineIndex; }
			set { m->BasePipelineIndex = value; }
		}
	}

	unsafe public struct VertexInputBindingDescription
	{
		public UInt32 Binding;
		public UInt32 Stride;
		public VertexInputRate InputRate;
	}

	unsafe public struct VertexInputAttributeDescription
	{
		public UInt32 Location;
		public UInt32 Binding;
		public Format Format;
		public UInt32 Offset;
	}

	unsafe public class PipelineVertexInputStateCreateInfo
	{
		internal Interop.PipelineVertexInputStateCreateInfo* m;

		public PipelineVertexInputStateCreateInfo ()
		{
			m = (Interop.PipelineVertexInputStateCreateInfo*) Interop.Structure.Allocate (typeof (Interop.PipelineVertexInputStateCreateInfo));
			m->SType = StructureType.PipelineVertexInputStateCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 VertexBindingDescriptionCount {
			get { return m->VertexBindingDescriptionCount; }
			set { m->VertexBindingDescriptionCount = value; }
		}

		public VertexInputBindingDescription VertexBindingDescriptions {
			get { return m->VertexBindingDescriptions; }
			set { m->VertexBindingDescriptions = value; }
		}

		public UInt32 VertexAttributeDescriptionCount {
			get { return m->VertexAttributeDescriptionCount; }
			set { m->VertexAttributeDescriptionCount = value; }
		}

		public VertexInputAttributeDescription VertexAttributeDescriptions {
			get { return m->VertexAttributeDescriptions; }
			set { m->VertexAttributeDescriptions = value; }
		}
	}

	unsafe public class PipelineInputAssemblyStateCreateInfo
	{
		internal Interop.PipelineInputAssemblyStateCreateInfo* m;

		public PipelineInputAssemblyStateCreateInfo ()
		{
			m = (Interop.PipelineInputAssemblyStateCreateInfo*) Interop.Structure.Allocate (typeof (Interop.PipelineInputAssemblyStateCreateInfo));
			m->SType = StructureType.PipelineInputAssemblyStateCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public PrimitiveTopology Topology {
			get { return m->Topology; }
			set { m->Topology = value; }
		}

		public bool PrimitiveRestartEnable {
			get { return m->PrimitiveRestartEnable; }
			set { m->PrimitiveRestartEnable = value; }
		}
	}

	unsafe public class PipelineTessellationStateCreateInfo
	{
		internal Interop.PipelineTessellationStateCreateInfo* m;

		public PipelineTessellationStateCreateInfo ()
		{
			m = (Interop.PipelineTessellationStateCreateInfo*) Interop.Structure.Allocate (typeof (Interop.PipelineTessellationStateCreateInfo));
			m->SType = StructureType.PipelineTessellationStateCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 PatchControlPoints {
			get { return m->PatchControlPoints; }
			set { m->PatchControlPoints = value; }
		}
	}

	unsafe public class PipelineViewportStateCreateInfo
	{
		internal Interop.PipelineViewportStateCreateInfo* m;

		public PipelineViewportStateCreateInfo ()
		{
			m = (Interop.PipelineViewportStateCreateInfo*) Interop.Structure.Allocate (typeof (Interop.PipelineViewportStateCreateInfo));
			m->SType = StructureType.PipelineViewportStateCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 ViewportCount {
			get { return m->ViewportCount; }
			set { m->ViewportCount = value; }
		}

		public Viewport Viewports {
			get { return m->Viewports; }
			set { m->Viewports = value; }
		}

		public UInt32 ScissorCount {
			get { return m->ScissorCount; }
			set { m->ScissorCount = value; }
		}

		public Rect2D Scissors {
			get { return m->Scissors; }
			set { m->Scissors = value; }
		}
	}

	unsafe public class PipelineRasterizationStateCreateInfo
	{
		internal Interop.PipelineRasterizationStateCreateInfo* m;

		public PipelineRasterizationStateCreateInfo ()
		{
			m = (Interop.PipelineRasterizationStateCreateInfo*) Interop.Structure.Allocate (typeof (Interop.PipelineRasterizationStateCreateInfo));
			m->SType = StructureType.PipelineRasterizationStateCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public bool DepthClampEnable {
			get { return m->DepthClampEnable; }
			set { m->DepthClampEnable = value; }
		}

		public bool RasterizerDiscardEnable {
			get { return m->RasterizerDiscardEnable; }
			set { m->RasterizerDiscardEnable = value; }
		}

		public PolygonMode PolygonMode {
			get { return m->PolygonMode; }
			set { m->PolygonMode = value; }
		}

		public UInt32 CullMode {
			get { return m->CullMode; }
			set { m->CullMode = value; }
		}

		public FrontFace FrontFace {
			get { return m->FrontFace; }
			set { m->FrontFace = value; }
		}

		public bool DepthBiasEnable {
			get { return m->DepthBiasEnable; }
			set { m->DepthBiasEnable = value; }
		}

		public float DepthBiasConstantFactor {
			get { return m->DepthBiasConstantFactor; }
			set { m->DepthBiasConstantFactor = value; }
		}

		public float DepthBiasClamp {
			get { return m->DepthBiasClamp; }
			set { m->DepthBiasClamp = value; }
		}

		public float DepthBiasSlopeFactor {
			get { return m->DepthBiasSlopeFactor; }
			set { m->DepthBiasSlopeFactor = value; }
		}

		public float LineWidth {
			get { return m->LineWidth; }
			set { m->LineWidth = value; }
		}
	}

	unsafe public class PipelineMultisampleStateCreateInfo
	{
		internal Interop.PipelineMultisampleStateCreateInfo* m;

		public PipelineMultisampleStateCreateInfo ()
		{
			m = (Interop.PipelineMultisampleStateCreateInfo*) Interop.Structure.Allocate (typeof (Interop.PipelineMultisampleStateCreateInfo));
			m->SType = StructureType.PipelineMultisampleStateCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 RasterizationSamples {
			get { return m->RasterizationSamples; }
			set { m->RasterizationSamples = value; }
		}

		public bool SampleShadingEnable {
			get { return m->SampleShadingEnable; }
			set { m->SampleShadingEnable = value; }
		}

		public float MinSampleShading {
			get { return m->MinSampleShading; }
			set { m->MinSampleShading = value; }
		}

		public UInt32 SampleMask {
			get { return m->SampleMask; }
			set { m->SampleMask = value; }
		}

		public bool AlphaToCoverageEnable {
			get { return m->AlphaToCoverageEnable; }
			set { m->AlphaToCoverageEnable = value; }
		}

		public bool AlphaToOneEnable {
			get { return m->AlphaToOneEnable; }
			set { m->AlphaToOneEnable = value; }
		}
	}

	unsafe public struct PipelineColorBlendAttachmentState
	{
		public bool BlendEnable;
		public BlendFactor SrcColorBlendFactor;
		public BlendFactor DstColorBlendFactor;
		public BlendOp ColorBlendOp;
		public BlendFactor SrcAlphaBlendFactor;
		public BlendFactor DstAlphaBlendFactor;
		public BlendOp AlphaBlendOp;
		public UInt32 ColorWriteMask;
	}

	unsafe public class PipelineColorBlendStateCreateInfo
	{
		internal Interop.PipelineColorBlendStateCreateInfo* m;

		public PipelineColorBlendStateCreateInfo ()
		{
			m = (Interop.PipelineColorBlendStateCreateInfo*) Interop.Structure.Allocate (typeof (Interop.PipelineColorBlendStateCreateInfo));
			m->SType = StructureType.PipelineColorBlendStateCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public bool LogicOpEnable {
			get { return m->LogicOpEnable; }
			set { m->LogicOpEnable = value; }
		}

		public LogicOp LogicOp {
			get { return m->LogicOp; }
			set { m->LogicOp = value; }
		}

		public UInt32 AttachmentCount {
			get { return m->AttachmentCount; }
			set { m->AttachmentCount = value; }
		}

		public PipelineColorBlendAttachmentState Attachments {
			get { return m->Attachments; }
			set { m->Attachments = value; }
		}

		public float BlendConstants {
			get { return m->BlendConstants; }
			set { m->BlendConstants = value; }
		}
	}

	unsafe public class PipelineDynamicStateCreateInfo
	{
		internal Interop.PipelineDynamicStateCreateInfo* m;

		public PipelineDynamicStateCreateInfo ()
		{
			m = (Interop.PipelineDynamicStateCreateInfo*) Interop.Structure.Allocate (typeof (Interop.PipelineDynamicStateCreateInfo));
			m->SType = StructureType.PipelineDynamicStateCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 DynamicStateCount {
			get { return m->DynamicStateCount; }
			set { m->DynamicStateCount = value; }
		}

		public DynamicState DynamicStates {
			get { return m->DynamicStates; }
			set { m->DynamicStates = value; }
		}
	}

	unsafe public struct StencilOpState
	{
		public StencilOp FailOp;
		public StencilOp PassOp;
		public StencilOp DepthFailOp;
		public CompareOp CompareOp;
		public UInt32 CompareMask;
		public UInt32 WriteMask;
		public UInt32 Reference;
	}

	unsafe public class PipelineDepthStencilStateCreateInfo
	{
		internal Interop.PipelineDepthStencilStateCreateInfo* m;

		public PipelineDepthStencilStateCreateInfo ()
		{
			m = (Interop.PipelineDepthStencilStateCreateInfo*) Interop.Structure.Allocate (typeof (Interop.PipelineDepthStencilStateCreateInfo));
			m->SType = StructureType.PipelineDepthStencilStateCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public bool DepthTestEnable {
			get { return m->DepthTestEnable; }
			set { m->DepthTestEnable = value; }
		}

		public bool DepthWriteEnable {
			get { return m->DepthWriteEnable; }
			set { m->DepthWriteEnable = value; }
		}

		public CompareOp DepthCompareOp {
			get { return m->DepthCompareOp; }
			set { m->DepthCompareOp = value; }
		}

		public bool DepthBoundsTestEnable {
			get { return m->DepthBoundsTestEnable; }
			set { m->DepthBoundsTestEnable = value; }
		}

		public bool StencilTestEnable {
			get { return m->StencilTestEnable; }
			set { m->StencilTestEnable = value; }
		}

		public StencilOpState Front {
			get { return m->Front; }
			set { m->Front = value; }
		}

		public StencilOpState Back {
			get { return m->Back; }
			set { m->Back = value; }
		}

		public float MinDepthBounds {
			get { return m->MinDepthBounds; }
			set { m->MinDepthBounds = value; }
		}

		public float MaxDepthBounds {
			get { return m->MaxDepthBounds; }
			set { m->MaxDepthBounds = value; }
		}
	}

	unsafe public class GraphicsPipelineCreateInfo
	{
		internal Interop.GraphicsPipelineCreateInfo* m;

		public GraphicsPipelineCreateInfo ()
		{
			m = (Interop.GraphicsPipelineCreateInfo*) Interop.Structure.Allocate (typeof (Interop.GraphicsPipelineCreateInfo));
			m->SType = StructureType.GraphicsPipelineCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 StageCount {
			get { return m->StageCount; }
			set { m->StageCount = value; }
		}

		PipelineShaderStageCreateInfo lStages;
		public PipelineShaderStageCreateInfo Stages {
			get { return lStages; }
			set { lStages = value; m->Stages = (IntPtr)value.m; }
		}

		PipelineVertexInputStateCreateInfo lVertexInputState;
		public PipelineVertexInputStateCreateInfo VertexInputState {
			get { return lVertexInputState; }
			set { lVertexInputState = value; m->VertexInputState = (IntPtr)value.m; }
		}

		PipelineInputAssemblyStateCreateInfo lInputAssemblyState;
		public PipelineInputAssemblyStateCreateInfo InputAssemblyState {
			get { return lInputAssemblyState; }
			set { lInputAssemblyState = value; m->InputAssemblyState = (IntPtr)value.m; }
		}

		PipelineTessellationStateCreateInfo lTessellationState;
		public PipelineTessellationStateCreateInfo TessellationState {
			get { return lTessellationState; }
			set { lTessellationState = value; m->TessellationState = (IntPtr)value.m; }
		}

		PipelineViewportStateCreateInfo lViewportState;
		public PipelineViewportStateCreateInfo ViewportState {
			get { return lViewportState; }
			set { lViewportState = value; m->ViewportState = (IntPtr)value.m; }
		}

		PipelineRasterizationStateCreateInfo lRasterizationState;
		public PipelineRasterizationStateCreateInfo RasterizationState {
			get { return lRasterizationState; }
			set { lRasterizationState = value; m->RasterizationState = (IntPtr)value.m; }
		}

		PipelineMultisampleStateCreateInfo lMultisampleState;
		public PipelineMultisampleStateCreateInfo MultisampleState {
			get { return lMultisampleState; }
			set { lMultisampleState = value; m->MultisampleState = (IntPtr)value.m; }
		}

		PipelineDepthStencilStateCreateInfo lDepthStencilState;
		public PipelineDepthStencilStateCreateInfo DepthStencilState {
			get { return lDepthStencilState; }
			set { lDepthStencilState = value; m->DepthStencilState = (IntPtr)value.m; }
		}

		PipelineColorBlendStateCreateInfo lColorBlendState;
		public PipelineColorBlendStateCreateInfo ColorBlendState {
			get { return lColorBlendState; }
			set { lColorBlendState = value; m->ColorBlendState = (IntPtr)value.m; }
		}

		PipelineDynamicStateCreateInfo lDynamicState;
		public PipelineDynamicStateCreateInfo DynamicState {
			get { return lDynamicState; }
			set { lDynamicState = value; m->DynamicState = (IntPtr)value.m; }
		}

		PipelineLayout lLayout;
		public PipelineLayout Layout {
			get { return lLayout; }
			set { lLayout = value; m->Layout = (UInt64)value.m; }
		}

		RenderPass lRenderPass;
		public RenderPass RenderPass {
			get { return lRenderPass; }
			set { lRenderPass = value; m->RenderPass = (UInt64)value.m; }
		}

		public UInt32 Subpass {
			get { return m->Subpass; }
			set { m->Subpass = value; }
		}

		Pipeline lBasePipelineHandle;
		public Pipeline BasePipelineHandle {
			get { return lBasePipelineHandle; }
			set { lBasePipelineHandle = value; m->BasePipelineHandle = (UInt64)value.m; }
		}

		public Int32 BasePipelineIndex {
			get { return m->BasePipelineIndex; }
			set { m->BasePipelineIndex = value; }
		}
	}

	unsafe public class PipelineCacheCreateInfo
	{
		internal Interop.PipelineCacheCreateInfo* m;

		public PipelineCacheCreateInfo ()
		{
			m = (Interop.PipelineCacheCreateInfo*) Interop.Structure.Allocate (typeof (Interop.PipelineCacheCreateInfo));
			m->SType = StructureType.PipelineCacheCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UIntPtr InitialDataSize {
			get { return m->InitialDataSize; }
			set { m->InitialDataSize = value; }
		}

		public IntPtr InitialData {
			get { return m->InitialData; }
			set { m->InitialData = value; }
		}
	}

	unsafe public struct PushConstantRange
	{
		public UInt32 StageFlags;
		public UInt32 Offset;
		public UInt32 Size;
	}

	unsafe public class PipelineLayoutCreateInfo
	{
		internal Interop.PipelineLayoutCreateInfo* m;

		public PipelineLayoutCreateInfo ()
		{
			m = (Interop.PipelineLayoutCreateInfo*) Interop.Structure.Allocate (typeof (Interop.PipelineLayoutCreateInfo));
			m->SType = StructureType.PipelineLayoutCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 SetLayoutCount {
			get { return m->SetLayoutCount; }
			set { m->SetLayoutCount = value; }
		}

		DescriptorSetLayout lSetLayouts;
		public DescriptorSetLayout SetLayouts {
			get { return lSetLayouts; }
			set { lSetLayouts = value; m->SetLayouts = (UInt64)value.m; }
		}

		public UInt32 PushConstantRangeCount {
			get { return m->PushConstantRangeCount; }
			set { m->PushConstantRangeCount = value; }
		}

		public PushConstantRange PushConstantRanges {
			get { return m->PushConstantRanges; }
			set { m->PushConstantRanges = value; }
		}
	}

	unsafe public class SamplerCreateInfo
	{
		internal Interop.SamplerCreateInfo* m;

		public SamplerCreateInfo ()
		{
			m = (Interop.SamplerCreateInfo*) Interop.Structure.Allocate (typeof (Interop.SamplerCreateInfo));
			m->SType = StructureType.SamplerCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public Filter MagFilter {
			get { return m->MagFilter; }
			set { m->MagFilter = value; }
		}

		public Filter MinFilter {
			get { return m->MinFilter; }
			set { m->MinFilter = value; }
		}

		public SamplerMipmapMode MipmapMode {
			get { return m->MipmapMode; }
			set { m->MipmapMode = value; }
		}

		public SamplerAddressMode AddressModeU {
			get { return m->AddressModeU; }
			set { m->AddressModeU = value; }
		}

		public SamplerAddressMode AddressModeV {
			get { return m->AddressModeV; }
			set { m->AddressModeV = value; }
		}

		public SamplerAddressMode AddressModeW {
			get { return m->AddressModeW; }
			set { m->AddressModeW = value; }
		}

		public float MipLodBias {
			get { return m->MipLodBias; }
			set { m->MipLodBias = value; }
		}

		public bool AnisotropyEnable {
			get { return m->AnisotropyEnable; }
			set { m->AnisotropyEnable = value; }
		}

		public float MaxAnisotropy {
			get { return m->MaxAnisotropy; }
			set { m->MaxAnisotropy = value; }
		}

		public bool CompareEnable {
			get { return m->CompareEnable; }
			set { m->CompareEnable = value; }
		}

		public CompareOp CompareOp {
			get { return m->CompareOp; }
			set { m->CompareOp = value; }
		}

		public float MinLod {
			get { return m->MinLod; }
			set { m->MinLod = value; }
		}

		public float MaxLod {
			get { return m->MaxLod; }
			set { m->MaxLod = value; }
		}

		public BorderColor BorderColor {
			get { return m->BorderColor; }
			set { m->BorderColor = value; }
		}

		public bool UnnormalizedCoordinates {
			get { return m->UnnormalizedCoordinates; }
			set { m->UnnormalizedCoordinates = value; }
		}
	}

	unsafe public class CommandPoolCreateInfo
	{
		internal Interop.CommandPoolCreateInfo* m;

		public CommandPoolCreateInfo ()
		{
			m = (Interop.CommandPoolCreateInfo*) Interop.Structure.Allocate (typeof (Interop.CommandPoolCreateInfo));
			m->SType = StructureType.CommandPoolCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 QueueFamilyIndex {
			get { return m->QueueFamilyIndex; }
			set { m->QueueFamilyIndex = value; }
		}
	}

	unsafe public class CommandBufferAllocateInfo
	{
		internal Interop.CommandBufferAllocateInfo* m;

		public CommandBufferAllocateInfo ()
		{
			m = (Interop.CommandBufferAllocateInfo*) Interop.Structure.Allocate (typeof (Interop.CommandBufferAllocateInfo));
			m->SType = StructureType.CommandBufferAllocateInfo;
		}

		CommandPool lCommandPool;
		public CommandPool CommandPool {
			get { return lCommandPool; }
			set { lCommandPool = value; m->CommandPool = (UInt64)value.m; }
		}

		public CommandBufferLevel Level {
			get { return m->Level; }
			set { m->Level = value; }
		}

		public UInt32 CommandBufferCount {
			get { return m->CommandBufferCount; }
			set { m->CommandBufferCount = value; }
		}
	}

	unsafe public class CommandBufferInheritanceInfo
	{
		internal Interop.CommandBufferInheritanceInfo* m;

		public CommandBufferInheritanceInfo ()
		{
			m = (Interop.CommandBufferInheritanceInfo*) Interop.Structure.Allocate (typeof (Interop.CommandBufferInheritanceInfo));
			m->SType = StructureType.CommandBufferInheritanceInfo;
		}

		RenderPass lRenderPass;
		public RenderPass RenderPass {
			get { return lRenderPass; }
			set { lRenderPass = value; m->RenderPass = (UInt64)value.m; }
		}

		public UInt32 Subpass {
			get { return m->Subpass; }
			set { m->Subpass = value; }
		}

		Framebuffer lFramebuffer;
		public Framebuffer Framebuffer {
			get { return lFramebuffer; }
			set { lFramebuffer = value; m->Framebuffer = (UInt64)value.m; }
		}

		public bool OcclusionQueryEnable {
			get { return m->OcclusionQueryEnable; }
			set { m->OcclusionQueryEnable = value; }
		}

		public UInt32 QueryFlags {
			get { return m->QueryFlags; }
			set { m->QueryFlags = value; }
		}

		public UInt32 PipelineStatistics {
			get { return m->PipelineStatistics; }
			set { m->PipelineStatistics = value; }
		}
	}

	unsafe public class CommandBufferBeginInfo
	{
		internal Interop.CommandBufferBeginInfo* m;

		public CommandBufferBeginInfo ()
		{
			m = (Interop.CommandBufferBeginInfo*) Interop.Structure.Allocate (typeof (Interop.CommandBufferBeginInfo));
			m->SType = StructureType.CommandBufferBeginInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		CommandBufferInheritanceInfo lInheritanceInfo;
		public CommandBufferInheritanceInfo InheritanceInfo {
			get { return lInheritanceInfo; }
			set { lInheritanceInfo = value; m->InheritanceInfo = (IntPtr)value.m; }
		}
	}

	unsafe public class RenderPassBeginInfo
	{
		internal Interop.RenderPassBeginInfo* m;

		public RenderPassBeginInfo ()
		{
			m = (Interop.RenderPassBeginInfo*) Interop.Structure.Allocate (typeof (Interop.RenderPassBeginInfo));
			m->SType = StructureType.RenderPassBeginInfo;
		}

		RenderPass lRenderPass;
		public RenderPass RenderPass {
			get { return lRenderPass; }
			set { lRenderPass = value; m->RenderPass = (UInt64)value.m; }
		}

		Framebuffer lFramebuffer;
		public Framebuffer Framebuffer {
			get { return lFramebuffer; }
			set { lFramebuffer = value; m->Framebuffer = (UInt64)value.m; }
		}

		public Rect2D RenderArea {
			get { return m->RenderArea; }
			set { m->RenderArea = value; }
		}

		public UInt32 ClearValueCount {
			get { return m->ClearValueCount; }
			set { m->ClearValueCount = value; }
		}

		public ClearValue ClearValues {
			get { return m->ClearValues; }
			set { m->ClearValues = value; }
		}
	}

	unsafe public struct ClearDepthStencilValue
	{
		public float Depth;
		public UInt32 Stencil;
	}

	unsafe public struct ClearAttachment
	{
		public UInt32 AspectMask;
		public UInt32 ColorAttachment;
		public ClearValue ClearValue;
	}

	unsafe public struct AttachmentDescription
	{
		public UInt32 Flags;
		public Format Format;
		public UInt32 Samples;
		public AttachmentLoadOp LoadOp;
		public AttachmentStoreOp StoreOp;
		public AttachmentLoadOp StencilLoadOp;
		public AttachmentStoreOp StencilStoreOp;
		public ImageLayout InitialLayout;
		public ImageLayout FinalLayout;
	}

	unsafe public struct AttachmentReference
	{
		public UInt32 Attachment;
		public ImageLayout Layout;
	}

	unsafe public class SubpassDescription
	{
		internal Interop.SubpassDescription* m;

		public SubpassDescription ()
		{
			m = (Interop.SubpassDescription*) Interop.Structure.Allocate (typeof (Interop.SubpassDescription));
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public PipelineBindPoint PipelineBindPoint {
			get { return m->PipelineBindPoint; }
			set { m->PipelineBindPoint = value; }
		}

		public UInt32 InputAttachmentCount {
			get { return m->InputAttachmentCount; }
			set { m->InputAttachmentCount = value; }
		}

		public AttachmentReference InputAttachments {
			get { return m->InputAttachments; }
			set { m->InputAttachments = value; }
		}

		public UInt32 ColorAttachmentCount {
			get { return m->ColorAttachmentCount; }
			set { m->ColorAttachmentCount = value; }
		}

		public AttachmentReference ColorAttachments {
			get { return m->ColorAttachments; }
			set { m->ColorAttachments = value; }
		}

		public AttachmentReference ResolveAttachments {
			get { return m->ResolveAttachments; }
			set { m->ResolveAttachments = value; }
		}

		public AttachmentReference DepthStencilAttachment {
			get { return m->DepthStencilAttachment; }
			set { m->DepthStencilAttachment = value; }
		}

		public UInt32 PreserveAttachmentCount {
			get { return m->PreserveAttachmentCount; }
			set { m->PreserveAttachmentCount = value; }
		}

		public UInt32[] PreserveAttachments {
			get {
				var values = new UInt32 [m->PreserveAttachmentCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->PreserveAttachments;
					for (int i = 0; i < m->PreserveAttachmentCount; i++)
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				m->PreserveAttachmentCount = (uint)value.Length;
				m->PreserveAttachments = Marshal.AllocHGlobal ((int)(sizeof(UInt32)*m->PreserveAttachmentCount));
				unsafe
				{
					UInt32* ptr = (UInt32*)m->PreserveAttachments;
					for (int i = 0; i < m->PreserveAttachmentCount; i++)
						ptr [i] = value [i];
				}
			}
		}
	}

	unsafe public struct SubpassDependency
	{
		public UInt32 SrcSubpass;
		public UInt32 DstSubpass;
		public UInt32 SrcStageMask;
		public UInt32 DstStageMask;
		public UInt32 SrcAccessMask;
		public UInt32 DstAccessMask;
		public UInt32 DependencyFlags;
	}

	unsafe public class RenderPassCreateInfo
	{
		internal Interop.RenderPassCreateInfo* m;

		public RenderPassCreateInfo ()
		{
			m = (Interop.RenderPassCreateInfo*) Interop.Structure.Allocate (typeof (Interop.RenderPassCreateInfo));
			m->SType = StructureType.RenderPassCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 AttachmentCount {
			get { return m->AttachmentCount; }
			set { m->AttachmentCount = value; }
		}

		public AttachmentDescription Attachments {
			get { return m->Attachments; }
			set { m->Attachments = value; }
		}

		public UInt32 SubpassCount {
			get { return m->SubpassCount; }
			set { m->SubpassCount = value; }
		}

		SubpassDescription lSubpasses;
		public SubpassDescription Subpasses {
			get { return lSubpasses; }
			set { lSubpasses = value; m->Subpasses = (IntPtr)value.m; }
		}

		public UInt32 DependencyCount {
			get { return m->DependencyCount; }
			set { m->DependencyCount = value; }
		}

		public SubpassDependency Dependencies {
			get { return m->Dependencies; }
			set { m->Dependencies = value; }
		}
	}

	unsafe public class EventCreateInfo
	{
		internal Interop.EventCreateInfo* m;

		public EventCreateInfo ()
		{
			m = (Interop.EventCreateInfo*) Interop.Structure.Allocate (typeof (Interop.EventCreateInfo));
			m->SType = StructureType.EventCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}
	}

	unsafe public class FenceCreateInfo
	{
		internal Interop.FenceCreateInfo* m;

		public FenceCreateInfo ()
		{
			m = (Interop.FenceCreateInfo*) Interop.Structure.Allocate (typeof (Interop.FenceCreateInfo));
			m->SType = StructureType.FenceCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}
	}

	unsafe public struct PhysicalDeviceFeatures
	{
		public bool RobustBufferAccess;
		public bool FullDrawIndexUint32;
		public bool ImageCubeArray;
		public bool IndependentBlend;
		public bool GeometryShader;
		public bool TessellationShader;
		public bool SampleRateShading;
		public bool DualSrcBlend;
		public bool LogicOp;
		public bool MultiDrawIndirect;
		public bool DrawIndirectFirstInstance;
		public bool DepthClamp;
		public bool DepthBiasClamp;
		public bool FillModeNonSolid;
		public bool DepthBounds;
		public bool WideLines;
		public bool LargePoints;
		public bool AlphaToOne;
		public bool MultiViewport;
		public bool SamplerAnisotropy;
		public bool TextureCompressionETC2;
		public bool TextureCompressionASTCLdr;
		public bool TextureCompressionBC;
		public bool OcclusionQueryPrecise;
		public bool PipelineStatisticsQuery;
		public bool VertexPipelineStoresAndAtomics;
		public bool FragmentStoresAndAtomics;
		public bool ShaderTessellationAndGeometryPointSize;
		public bool ShaderImageGatherExtended;
		public bool ShaderStorageImageExtendedFormats;
		public bool ShaderStorageImageMultisample;
		public bool ShaderStorageImageReadWithoutFormat;
		public bool ShaderStorageImageWriteWithoutFormat;
		public bool ShaderUniformBufferArrayDynamicIndexing;
		public bool ShaderSampledImageArrayDynamicIndexing;
		public bool ShaderStorageBufferArrayDynamicIndexing;
		public bool ShaderStorageImageArrayDynamicIndexing;
		public bool ShaderClipDistance;
		public bool ShaderCullDistance;
		public bool ShaderFloat64;
		public bool ShaderInt64;
		public bool ShaderInt16;
		public bool ShaderResourceResidency;
		public bool ShaderResourceMinLod;
		public bool SparseBinding;
		public bool SparseResidencyBuffer;
		public bool SparseResidencyImage2D;
		public bool SparseResidencyImage3D;
		public bool SparseResidency2Samples;
		public bool SparseResidency4Samples;
		public bool SparseResidency8Samples;
		public bool SparseResidency16Samples;
		public bool SparseResidencyAliased;
		public bool VariableMultisampleRate;
		public bool InheritedQueries;
	}

	unsafe public struct PhysicalDeviceSparseProperties
	{
		public bool ResidencyStandard2DBlockShape;
		public bool ResidencyStandard2DMultisampleBlockShape;
		public bool ResidencyStandard3DBlockShape;
		public bool ResidencyAlignedMipSize;
		public bool ResidencyNonResidentStrict;
	}

	unsafe public class PhysicalDeviceLimits
	{
		internal Interop.PhysicalDeviceLimits* m;

		public PhysicalDeviceLimits ()
		{
			m = (Interop.PhysicalDeviceLimits*) Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceLimits));
		}

		public UInt32 MaxImageDimension1D {
			get { return m->MaxImageDimension1D; }
			set { m->MaxImageDimension1D = value; }
		}

		public UInt32 MaxImageDimension2D {
			get { return m->MaxImageDimension2D; }
			set { m->MaxImageDimension2D = value; }
		}

		public UInt32 MaxImageDimension3D {
			get { return m->MaxImageDimension3D; }
			set { m->MaxImageDimension3D = value; }
		}

		public UInt32 MaxImageDimensionCube {
			get { return m->MaxImageDimensionCube; }
			set { m->MaxImageDimensionCube = value; }
		}

		public UInt32 MaxImageArrayLayers {
			get { return m->MaxImageArrayLayers; }
			set { m->MaxImageArrayLayers = value; }
		}

		public UInt32 MaxTexelBufferElements {
			get { return m->MaxTexelBufferElements; }
			set { m->MaxTexelBufferElements = value; }
		}

		public UInt32 MaxUniformBufferRange {
			get { return m->MaxUniformBufferRange; }
			set { m->MaxUniformBufferRange = value; }
		}

		public UInt32 MaxStorageBufferRange {
			get { return m->MaxStorageBufferRange; }
			set { m->MaxStorageBufferRange = value; }
		}

		public UInt32 MaxPushConstantsSize {
			get { return m->MaxPushConstantsSize; }
			set { m->MaxPushConstantsSize = value; }
		}

		public UInt32 MaxMemoryAllocationCount {
			get { return m->MaxMemoryAllocationCount; }
			set { m->MaxMemoryAllocationCount = value; }
		}

		public UInt32 MaxSamplerAllocationCount {
			get { return m->MaxSamplerAllocationCount; }
			set { m->MaxSamplerAllocationCount = value; }
		}

		public DeviceSize BufferImageGranularity {
			get { return m->BufferImageGranularity; }
			set { m->BufferImageGranularity = value; }
		}

		public DeviceSize SparseAddressSpaceSize {
			get { return m->SparseAddressSpaceSize; }
			set { m->SparseAddressSpaceSize = value; }
		}

		public UInt32 MaxBoundDescriptorSets {
			get { return m->MaxBoundDescriptorSets; }
			set { m->MaxBoundDescriptorSets = value; }
		}

		public UInt32 MaxPerStageDescriptorSamplers {
			get { return m->MaxPerStageDescriptorSamplers; }
			set { m->MaxPerStageDescriptorSamplers = value; }
		}

		public UInt32 MaxPerStageDescriptorUniformBuffers {
			get { return m->MaxPerStageDescriptorUniformBuffers; }
			set { m->MaxPerStageDescriptorUniformBuffers = value; }
		}

		public UInt32 MaxPerStageDescriptorStorageBuffers {
			get { return m->MaxPerStageDescriptorStorageBuffers; }
			set { m->MaxPerStageDescriptorStorageBuffers = value; }
		}

		public UInt32 MaxPerStageDescriptorSampledImages {
			get { return m->MaxPerStageDescriptorSampledImages; }
			set { m->MaxPerStageDescriptorSampledImages = value; }
		}

		public UInt32 MaxPerStageDescriptorStorageImages {
			get { return m->MaxPerStageDescriptorStorageImages; }
			set { m->MaxPerStageDescriptorStorageImages = value; }
		}

		public UInt32 MaxPerStageDescriptorInputAttachments {
			get { return m->MaxPerStageDescriptorInputAttachments; }
			set { m->MaxPerStageDescriptorInputAttachments = value; }
		}

		public UInt32 MaxPerStageResources {
			get { return m->MaxPerStageResources; }
			set { m->MaxPerStageResources = value; }
		}

		public UInt32 MaxDescriptorSetSamplers {
			get { return m->MaxDescriptorSetSamplers; }
			set { m->MaxDescriptorSetSamplers = value; }
		}

		public UInt32 MaxDescriptorSetUniformBuffers {
			get { return m->MaxDescriptorSetUniformBuffers; }
			set { m->MaxDescriptorSetUniformBuffers = value; }
		}

		public UInt32 MaxDescriptorSetUniformBuffersDynamic {
			get { return m->MaxDescriptorSetUniformBuffersDynamic; }
			set { m->MaxDescriptorSetUniformBuffersDynamic = value; }
		}

		public UInt32 MaxDescriptorSetStorageBuffers {
			get { return m->MaxDescriptorSetStorageBuffers; }
			set { m->MaxDescriptorSetStorageBuffers = value; }
		}

		public UInt32 MaxDescriptorSetStorageBuffersDynamic {
			get { return m->MaxDescriptorSetStorageBuffersDynamic; }
			set { m->MaxDescriptorSetStorageBuffersDynamic = value; }
		}

		public UInt32 MaxDescriptorSetSampledImages {
			get { return m->MaxDescriptorSetSampledImages; }
			set { m->MaxDescriptorSetSampledImages = value; }
		}

		public UInt32 MaxDescriptorSetStorageImages {
			get { return m->MaxDescriptorSetStorageImages; }
			set { m->MaxDescriptorSetStorageImages = value; }
		}

		public UInt32 MaxDescriptorSetInputAttachments {
			get { return m->MaxDescriptorSetInputAttachments; }
			set { m->MaxDescriptorSetInputAttachments = value; }
		}

		public UInt32 MaxVertexInputAttributes {
			get { return m->MaxVertexInputAttributes; }
			set { m->MaxVertexInputAttributes = value; }
		}

		public UInt32 MaxVertexInputBindings {
			get { return m->MaxVertexInputBindings; }
			set { m->MaxVertexInputBindings = value; }
		}

		public UInt32 MaxVertexInputAttributeOffset {
			get { return m->MaxVertexInputAttributeOffset; }
			set { m->MaxVertexInputAttributeOffset = value; }
		}

		public UInt32 MaxVertexInputBindingStride {
			get { return m->MaxVertexInputBindingStride; }
			set { m->MaxVertexInputBindingStride = value; }
		}

		public UInt32 MaxVertexOutputComponents {
			get { return m->MaxVertexOutputComponents; }
			set { m->MaxVertexOutputComponents = value; }
		}

		public UInt32 MaxTessellationGenerationLevel {
			get { return m->MaxTessellationGenerationLevel; }
			set { m->MaxTessellationGenerationLevel = value; }
		}

		public UInt32 MaxTessellationPatchSize {
			get { return m->MaxTessellationPatchSize; }
			set { m->MaxTessellationPatchSize = value; }
		}

		public UInt32 MaxTessellationControlPerVertexInputComponents {
			get { return m->MaxTessellationControlPerVertexInputComponents; }
			set { m->MaxTessellationControlPerVertexInputComponents = value; }
		}

		public UInt32 MaxTessellationControlPerVertexOutputComponents {
			get { return m->MaxTessellationControlPerVertexOutputComponents; }
			set { m->MaxTessellationControlPerVertexOutputComponents = value; }
		}

		public UInt32 MaxTessellationControlPerPatchOutputComponents {
			get { return m->MaxTessellationControlPerPatchOutputComponents; }
			set { m->MaxTessellationControlPerPatchOutputComponents = value; }
		}

		public UInt32 MaxTessellationControlTotalOutputComponents {
			get { return m->MaxTessellationControlTotalOutputComponents; }
			set { m->MaxTessellationControlTotalOutputComponents = value; }
		}

		public UInt32 MaxTessellationEvaluationInputComponents {
			get { return m->MaxTessellationEvaluationInputComponents; }
			set { m->MaxTessellationEvaluationInputComponents = value; }
		}

		public UInt32 MaxTessellationEvaluationOutputComponents {
			get { return m->MaxTessellationEvaluationOutputComponents; }
			set { m->MaxTessellationEvaluationOutputComponents = value; }
		}

		public UInt32 MaxGeometryShaderInvocations {
			get { return m->MaxGeometryShaderInvocations; }
			set { m->MaxGeometryShaderInvocations = value; }
		}

		public UInt32 MaxGeometryInputComponents {
			get { return m->MaxGeometryInputComponents; }
			set { m->MaxGeometryInputComponents = value; }
		}

		public UInt32 MaxGeometryOutputComponents {
			get { return m->MaxGeometryOutputComponents; }
			set { m->MaxGeometryOutputComponents = value; }
		}

		public UInt32 MaxGeometryOutputVertices {
			get { return m->MaxGeometryOutputVertices; }
			set { m->MaxGeometryOutputVertices = value; }
		}

		public UInt32 MaxGeometryTotalOutputComponents {
			get { return m->MaxGeometryTotalOutputComponents; }
			set { m->MaxGeometryTotalOutputComponents = value; }
		}

		public UInt32 MaxFragmentInputComponents {
			get { return m->MaxFragmentInputComponents; }
			set { m->MaxFragmentInputComponents = value; }
		}

		public UInt32 MaxFragmentOutputAttachments {
			get { return m->MaxFragmentOutputAttachments; }
			set { m->MaxFragmentOutputAttachments = value; }
		}

		public UInt32 MaxFragmentDualSrcAttachments {
			get { return m->MaxFragmentDualSrcAttachments; }
			set { m->MaxFragmentDualSrcAttachments = value; }
		}

		public UInt32 MaxFragmentCombinedOutputResources {
			get { return m->MaxFragmentCombinedOutputResources; }
			set { m->MaxFragmentCombinedOutputResources = value; }
		}

		public UInt32 MaxComputeSharedMemorySize {
			get { return m->MaxComputeSharedMemorySize; }
			set { m->MaxComputeSharedMemorySize = value; }
		}

		public UInt32 MaxComputeWorkGroupCount {
			get { return m->MaxComputeWorkGroupCount; }
			set { m->MaxComputeWorkGroupCount = value; }
		}

		public UInt32 MaxComputeWorkGroupInvocations {
			get { return m->MaxComputeWorkGroupInvocations; }
			set { m->MaxComputeWorkGroupInvocations = value; }
		}

		public UInt32 MaxComputeWorkGroupSize {
			get { return m->MaxComputeWorkGroupSize; }
			set { m->MaxComputeWorkGroupSize = value; }
		}

		public UInt32 SubPixelPrecisionBits {
			get { return m->SubPixelPrecisionBits; }
			set { m->SubPixelPrecisionBits = value; }
		}

		public UInt32 SubTexelPrecisionBits {
			get { return m->SubTexelPrecisionBits; }
			set { m->SubTexelPrecisionBits = value; }
		}

		public UInt32 MipmapPrecisionBits {
			get { return m->MipmapPrecisionBits; }
			set { m->MipmapPrecisionBits = value; }
		}

		public UInt32 MaxDrawIndexedIndexValue {
			get { return m->MaxDrawIndexedIndexValue; }
			set { m->MaxDrawIndexedIndexValue = value; }
		}

		public UInt32 MaxDrawIndirectCount {
			get { return m->MaxDrawIndirectCount; }
			set { m->MaxDrawIndirectCount = value; }
		}

		public float MaxSamplerLodBias {
			get { return m->MaxSamplerLodBias; }
			set { m->MaxSamplerLodBias = value; }
		}

		public float MaxSamplerAnisotropy {
			get { return m->MaxSamplerAnisotropy; }
			set { m->MaxSamplerAnisotropy = value; }
		}

		public UInt32 MaxViewports {
			get { return m->MaxViewports; }
			set { m->MaxViewports = value; }
		}

		public UInt32 MaxViewportDimensions {
			get { return m->MaxViewportDimensions; }
			set { m->MaxViewportDimensions = value; }
		}

		public float ViewportBoundsRange {
			get { return m->ViewportBoundsRange; }
			set { m->ViewportBoundsRange = value; }
		}

		public UInt32 ViewportSubPixelBits {
			get { return m->ViewportSubPixelBits; }
			set { m->ViewportSubPixelBits = value; }
		}

		public UIntPtr MinMemoryMapAlignment {
			get { return m->MinMemoryMapAlignment; }
			set { m->MinMemoryMapAlignment = value; }
		}

		public DeviceSize MinTexelBufferOffsetAlignment {
			get { return m->MinTexelBufferOffsetAlignment; }
			set { m->MinTexelBufferOffsetAlignment = value; }
		}

		public DeviceSize MinUniformBufferOffsetAlignment {
			get { return m->MinUniformBufferOffsetAlignment; }
			set { m->MinUniformBufferOffsetAlignment = value; }
		}

		public DeviceSize MinStorageBufferOffsetAlignment {
			get { return m->MinStorageBufferOffsetAlignment; }
			set { m->MinStorageBufferOffsetAlignment = value; }
		}

		public Int32 MinTexelOffset {
			get { return m->MinTexelOffset; }
			set { m->MinTexelOffset = value; }
		}

		public UInt32 MaxTexelOffset {
			get { return m->MaxTexelOffset; }
			set { m->MaxTexelOffset = value; }
		}

		public Int32 MinTexelGatherOffset {
			get { return m->MinTexelGatherOffset; }
			set { m->MinTexelGatherOffset = value; }
		}

		public UInt32 MaxTexelGatherOffset {
			get { return m->MaxTexelGatherOffset; }
			set { m->MaxTexelGatherOffset = value; }
		}

		public float MinInterpolationOffset {
			get { return m->MinInterpolationOffset; }
			set { m->MinInterpolationOffset = value; }
		}

		public float MaxInterpolationOffset {
			get { return m->MaxInterpolationOffset; }
			set { m->MaxInterpolationOffset = value; }
		}

		public UInt32 SubPixelInterpolationOffsetBits {
			get { return m->SubPixelInterpolationOffsetBits; }
			set { m->SubPixelInterpolationOffsetBits = value; }
		}

		public UInt32 MaxFramebufferWidth {
			get { return m->MaxFramebufferWidth; }
			set { m->MaxFramebufferWidth = value; }
		}

		public UInt32 MaxFramebufferHeight {
			get { return m->MaxFramebufferHeight; }
			set { m->MaxFramebufferHeight = value; }
		}

		public UInt32 MaxFramebufferLayers {
			get { return m->MaxFramebufferLayers; }
			set { m->MaxFramebufferLayers = value; }
		}

		public UInt32 FramebufferColorSampleCounts {
			get { return m->FramebufferColorSampleCounts; }
			set { m->FramebufferColorSampleCounts = value; }
		}

		public UInt32 FramebufferDepthSampleCounts {
			get { return m->FramebufferDepthSampleCounts; }
			set { m->FramebufferDepthSampleCounts = value; }
		}

		public UInt32 FramebufferStencilSampleCounts {
			get { return m->FramebufferStencilSampleCounts; }
			set { m->FramebufferStencilSampleCounts = value; }
		}

		public UInt32 FramebufferNoAttachmentsSampleCounts {
			get { return m->FramebufferNoAttachmentsSampleCounts; }
			set { m->FramebufferNoAttachmentsSampleCounts = value; }
		}

		public UInt32 MaxColorAttachments {
			get { return m->MaxColorAttachments; }
			set { m->MaxColorAttachments = value; }
		}

		public UInt32 SampledImageColorSampleCounts {
			get { return m->SampledImageColorSampleCounts; }
			set { m->SampledImageColorSampleCounts = value; }
		}

		public UInt32 SampledImageIntegerSampleCounts {
			get { return m->SampledImageIntegerSampleCounts; }
			set { m->SampledImageIntegerSampleCounts = value; }
		}

		public UInt32 SampledImageDepthSampleCounts {
			get { return m->SampledImageDepthSampleCounts; }
			set { m->SampledImageDepthSampleCounts = value; }
		}

		public UInt32 SampledImageStencilSampleCounts {
			get { return m->SampledImageStencilSampleCounts; }
			set { m->SampledImageStencilSampleCounts = value; }
		}

		public UInt32 StorageImageSampleCounts {
			get { return m->StorageImageSampleCounts; }
			set { m->StorageImageSampleCounts = value; }
		}

		public UInt32 MaxSampleMaskWords {
			get { return m->MaxSampleMaskWords; }
			set { m->MaxSampleMaskWords = value; }
		}

		public bool TimestampComputeAndGraphics {
			get { return m->TimestampComputeAndGraphics; }
			set { m->TimestampComputeAndGraphics = value; }
		}

		public float TimestampPeriod {
			get { return m->TimestampPeriod; }
			set { m->TimestampPeriod = value; }
		}

		public UInt32 MaxClipDistances {
			get { return m->MaxClipDistances; }
			set { m->MaxClipDistances = value; }
		}

		public UInt32 MaxCullDistances {
			get { return m->MaxCullDistances; }
			set { m->MaxCullDistances = value; }
		}

		public UInt32 MaxCombinedClipAndCullDistances {
			get { return m->MaxCombinedClipAndCullDistances; }
			set { m->MaxCombinedClipAndCullDistances = value; }
		}

		public UInt32 DiscreteQueuePriorities {
			get { return m->DiscreteQueuePriorities; }
			set { m->DiscreteQueuePriorities = value; }
		}

		public float PointSizeRange {
			get { return m->PointSizeRange; }
			set { m->PointSizeRange = value; }
		}

		public float LineWidthRange {
			get { return m->LineWidthRange; }
			set { m->LineWidthRange = value; }
		}

		public float PointSizeGranularity {
			get { return m->PointSizeGranularity; }
			set { m->PointSizeGranularity = value; }
		}

		public float LineWidthGranularity {
			get { return m->LineWidthGranularity; }
			set { m->LineWidthGranularity = value; }
		}

		public bool StrictLines {
			get { return m->StrictLines; }
			set { m->StrictLines = value; }
		}

		public bool StandardSampleLocations {
			get { return m->StandardSampleLocations; }
			set { m->StandardSampleLocations = value; }
		}

		public DeviceSize OptimalBufferCopyOffsetAlignment {
			get { return m->OptimalBufferCopyOffsetAlignment; }
			set { m->OptimalBufferCopyOffsetAlignment = value; }
		}

		public DeviceSize OptimalBufferCopyRowPitchAlignment {
			get { return m->OptimalBufferCopyRowPitchAlignment; }
			set { m->OptimalBufferCopyRowPitchAlignment = value; }
		}

		public DeviceSize NonCoherentAtomSize {
			get { return m->NonCoherentAtomSize; }
			set { m->NonCoherentAtomSize = value; }
		}
	}

	unsafe public class SemaphoreCreateInfo
	{
		internal Interop.SemaphoreCreateInfo* m;

		public SemaphoreCreateInfo ()
		{
			m = (Interop.SemaphoreCreateInfo*) Interop.Structure.Allocate (typeof (Interop.SemaphoreCreateInfo));
			m->SType = StructureType.SemaphoreCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}
	}

	unsafe public class QueryPoolCreateInfo
	{
		internal Interop.QueryPoolCreateInfo* m;

		public QueryPoolCreateInfo ()
		{
			m = (Interop.QueryPoolCreateInfo*) Interop.Structure.Allocate (typeof (Interop.QueryPoolCreateInfo));
			m->SType = StructureType.QueryPoolCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public QueryType QueryType {
			get { return m->QueryType; }
			set { m->QueryType = value; }
		}

		public UInt32 QueryCount {
			get { return m->QueryCount; }
			set { m->QueryCount = value; }
		}

		public UInt32 PipelineStatistics {
			get { return m->PipelineStatistics; }
			set { m->PipelineStatistics = value; }
		}
	}

	unsafe public class FramebufferCreateInfo
	{
		internal Interop.FramebufferCreateInfo* m;

		public FramebufferCreateInfo ()
		{
			m = (Interop.FramebufferCreateInfo*) Interop.Structure.Allocate (typeof (Interop.FramebufferCreateInfo));
			m->SType = StructureType.FramebufferCreateInfo;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		RenderPass lRenderPass;
		public RenderPass RenderPass {
			get { return lRenderPass; }
			set { lRenderPass = value; m->RenderPass = (UInt64)value.m; }
		}

		public UInt32 AttachmentCount {
			get { return m->AttachmentCount; }
			set { m->AttachmentCount = value; }
		}

		ImageView lAttachments;
		public ImageView Attachments {
			get { return lAttachments; }
			set { lAttachments = value; m->Attachments = (UInt64)value.m; }
		}

		public UInt32 Width {
			get { return m->Width; }
			set { m->Width = value; }
		}

		public UInt32 Height {
			get { return m->Height; }
			set { m->Height = value; }
		}

		public UInt32 Layers {
			get { return m->Layers; }
			set { m->Layers = value; }
		}
	}

	unsafe public struct DrawIndirectCommand
	{
		public UInt32 VertexCount;
		public UInt32 InstanceCount;
		public UInt32 FirstVertex;
		public UInt32 FirstInstance;
	}

	unsafe public struct DrawIndexedIndirectCommand
	{
		public UInt32 IndexCount;
		public UInt32 InstanceCount;
		public UInt32 FirstIndex;
		public Int32 VertexOffset;
		public UInt32 FirstInstance;
	}

	unsafe public struct DispatchIndirectCommand
	{
		public UInt32 X;
		public UInt32 Y;
		public UInt32 Z;
	}

	unsafe public class SubmitInfo
	{
		internal Interop.SubmitInfo* m;

		public SubmitInfo ()
		{
			m = (Interop.SubmitInfo*) Interop.Structure.Allocate (typeof (Interop.SubmitInfo));
			m->SType = StructureType.SubmitInfo;
		}

		public UInt32 WaitSemaphoreCount {
			get { return m->WaitSemaphoreCount; }
			set { m->WaitSemaphoreCount = value; }
		}

		Semaphore lWaitSemaphores;
		public Semaphore WaitSemaphores {
			get { return lWaitSemaphores; }
			set { lWaitSemaphores = value; m->WaitSemaphores = (UInt64)value.m; }
		}

		public UInt32 WaitDstStageMask {
			get { return m->WaitDstStageMask; }
			set { m->WaitDstStageMask = value; }
		}

		public UInt32 CommandBufferCount {
			get { return m->CommandBufferCount; }
			set { m->CommandBufferCount = value; }
		}

		CommandBuffer lCommandBuffers;
		public CommandBuffer CommandBuffers {
			get { return lCommandBuffers; }
			set { lCommandBuffers = value; m->CommandBuffers = (IntPtr)value.m; }
		}

		public UInt32 SignalSemaphoreCount {
			get { return m->SignalSemaphoreCount; }
			set { m->SignalSemaphoreCount = value; }
		}

		Semaphore lSignalSemaphores;
		public Semaphore SignalSemaphores {
			get { return lSignalSemaphores; }
			set { lSignalSemaphores = value; m->SignalSemaphores = (UInt64)value.m; }
		}
	}

	unsafe public class DisplayPropertiesKhr
	{
		internal Interop.DisplayPropertiesKhr* m;

		public DisplayPropertiesKhr ()
		{
			m = (Interop.DisplayPropertiesKhr*) Interop.Structure.Allocate (typeof (Interop.DisplayPropertiesKhr));
		}

		DisplayKhr lDisplay;
		public DisplayKhr Display {
			get { return lDisplay; }
			set { lDisplay = value; m->Display = (UInt64)value.m; }
		}

		public string DisplayName {
			get { return Marshal.PtrToStringAnsi (m->DisplayName); }
			set { m->DisplayName = Marshal.StringToHGlobalAnsi (value); }
		}

		public Extent2D PhysicalDimensions {
			get { return m->PhysicalDimensions; }
			set { m->PhysicalDimensions = value; }
		}

		public Extent2D PhysicalResolution {
			get { return m->PhysicalResolution; }
			set { m->PhysicalResolution = value; }
		}

		public SurfaceTransformFlagsKhr SupportedTransforms {
			get { return m->SupportedTransforms; }
			set { m->SupportedTransforms = value; }
		}

		public bool PlaneReorderPossible {
			get { return m->PlaneReorderPossible; }
			set { m->PlaneReorderPossible = value; }
		}

		public bool PersistentContent {
			get { return m->PersistentContent; }
			set { m->PersistentContent = value; }
		}
	}

	unsafe public struct DisplayPlanePropertiesKhr
	{
		public UInt64 CurrentDisplay;
		public UInt32 CurrentStackIndex;
	}

	unsafe public struct DisplayModeParametersKhr
	{
		public Extent2D VisibleRegion;
		public UInt32 RefreshRate;
	}

	unsafe public struct DisplayModePropertiesKhr
	{
		public UInt64 DisplayMode;
		public DisplayModeParametersKhr Parameters;
	}

	unsafe public class DisplayModeCreateInfoKhr
	{
		internal Interop.DisplayModeCreateInfoKhr* m;

		public DisplayModeCreateInfoKhr ()
		{
			m = (Interop.DisplayModeCreateInfoKhr*) Interop.Structure.Allocate (typeof (Interop.DisplayModeCreateInfoKhr));
			m->SType = StructureType.DisplayModeCreateInfoKhr;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public DisplayModeParametersKhr Parameters {
			get { return m->Parameters; }
			set { m->Parameters = value; }
		}
	}

	unsafe public struct DisplayPlaneCapabilitiesKhr
	{
		public DisplayPlaneAlphaFlagsKhr SupportedAlpha;
		public Offset2D MinSrcPosition;
		public Offset2D MaxSrcPosition;
		public Extent2D MinSrcExtent;
		public Extent2D MaxSrcExtent;
		public Offset2D MinDstPosition;
		public Offset2D MaxDstPosition;
		public Extent2D MinDstExtent;
		public Extent2D MaxDstExtent;
	}

	unsafe public class DisplaySurfaceCreateInfoKhr
	{
		internal Interop.DisplaySurfaceCreateInfoKhr* m;

		public DisplaySurfaceCreateInfoKhr ()
		{
			m = (Interop.DisplaySurfaceCreateInfoKhr*) Interop.Structure.Allocate (typeof (Interop.DisplaySurfaceCreateInfoKhr));
			m->SType = StructureType.DisplaySurfaceCreateInfoKhr;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		DisplayModeKhr lDisplayMode;
		public DisplayModeKhr DisplayMode {
			get { return lDisplayMode; }
			set { lDisplayMode = value; m->DisplayMode = (UInt64)value.m; }
		}

		public UInt32 PlaneIndex {
			get { return m->PlaneIndex; }
			set { m->PlaneIndex = value; }
		}

		public UInt32 PlaneStackIndex {
			get { return m->PlaneStackIndex; }
			set { m->PlaneStackIndex = value; }
		}

		public SurfaceTransformFlagsKhr Transform {
			get { return m->Transform; }
			set { m->Transform = value; }
		}

		public float GlobalAlpha {
			get { return m->GlobalAlpha; }
			set { m->GlobalAlpha = value; }
		}

		public DisplayPlaneAlphaFlagsKhr AlphaMode {
			get { return m->AlphaMode; }
			set { m->AlphaMode = value; }
		}

		public Extent2D ImageExtent {
			get { return m->ImageExtent; }
			set { m->ImageExtent = value; }
		}
	}

	unsafe public class DisplayPresentInfoKhr
	{
		internal Interop.DisplayPresentInfoKhr* m;

		public DisplayPresentInfoKhr ()
		{
			m = (Interop.DisplayPresentInfoKhr*) Interop.Structure.Allocate (typeof (Interop.DisplayPresentInfoKhr));
			m->SType = StructureType.DisplayPresentInfoKhr;
		}

		public Rect2D SrcRect {
			get { return m->SrcRect; }
			set { m->SrcRect = value; }
		}

		public Rect2D DstRect {
			get { return m->DstRect; }
			set { m->DstRect = value; }
		}

		public bool Persistent {
			get { return m->Persistent; }
			set { m->Persistent = value; }
		}
	}

	unsafe public struct SurfaceCapabilitiesKhr
	{
		public UInt32 MinImageCount;
		public UInt32 MaxImageCount;
		public Extent2D CurrentExtent;
		public Extent2D MinImageExtent;
		public Extent2D MaxImageExtent;
		public UInt32 MaxImageArrayLayers;
		public SurfaceTransformFlagsKhr SupportedTransforms;
		public SurfaceTransformFlagsKhr CurrentTransform;
		public CompositeAlphaFlagsKhr SupportedCompositeAlpha;
		public UInt32 SupportedUsageFlags;
	}

	unsafe public struct SurfaceFormatKhr
	{
		public Format Format;
		public ColorSpaceKhr ColorSpace;
	}

	unsafe public class SwapchainCreateInfoKhr
	{
		internal Interop.SwapchainCreateInfoKhr* m;

		public SwapchainCreateInfoKhr ()
		{
			m = (Interop.SwapchainCreateInfoKhr*) Interop.Structure.Allocate (typeof (Interop.SwapchainCreateInfoKhr));
			m->SType = StructureType.SwapchainCreateInfoKhr;
		}

		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		SurfaceKhr lSurface;
		public SurfaceKhr Surface {
			get { return lSurface; }
			set { lSurface = value; m->Surface = (UInt64)value.m; }
		}

		public UInt32 MinImageCount {
			get { return m->MinImageCount; }
			set { m->MinImageCount = value; }
		}

		public Format ImageFormat {
			get { return m->ImageFormat; }
			set { m->ImageFormat = value; }
		}

		public ColorSpaceKhr ImageColorSpace {
			get { return m->ImageColorSpace; }
			set { m->ImageColorSpace = value; }
		}

		public Extent2D ImageExtent {
			get { return m->ImageExtent; }
			set { m->ImageExtent = value; }
		}

		public UInt32 ImageArrayLayers {
			get { return m->ImageArrayLayers; }
			set { m->ImageArrayLayers = value; }
		}

		public UInt32 ImageUsage {
			get { return m->ImageUsage; }
			set { m->ImageUsage = value; }
		}

		public SharingMode ImageSharingMode {
			get { return m->ImageSharingMode; }
			set { m->ImageSharingMode = value; }
		}

		public UInt32 QueueFamilyIndexCount {
			get { return m->QueueFamilyIndexCount; }
			set { m->QueueFamilyIndexCount = value; }
		}

		public UInt32[] QueueFamilyIndices {
			get {
				var values = new UInt32 [m->QueueFamilyIndexCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->QueueFamilyIndices;
					for (int i = 0; i < m->QueueFamilyIndexCount; i++)
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				m->QueueFamilyIndexCount = (uint)value.Length;
				m->QueueFamilyIndices = Marshal.AllocHGlobal ((int)(sizeof(UInt32)*m->QueueFamilyIndexCount));
				unsafe
				{
					UInt32* ptr = (UInt32*)m->QueueFamilyIndices;
					for (int i = 0; i < m->QueueFamilyIndexCount; i++)
						ptr [i] = value [i];
				}
			}
		}

		public SurfaceTransformFlagsKhr PreTransform {
			get { return m->PreTransform; }
			set { m->PreTransform = value; }
		}

		public CompositeAlphaFlagsKhr CompositeAlpha {
			get { return m->CompositeAlpha; }
			set { m->CompositeAlpha = value; }
		}

		public PresentModeKhr PresentMode {
			get { return m->PresentMode; }
			set { m->PresentMode = value; }
		}

		public bool Clipped {
			get { return m->Clipped; }
			set { m->Clipped = value; }
		}

		SwapchainKhr lOldSwapchain;
		public SwapchainKhr OldSwapchain {
			get { return lOldSwapchain; }
			set { lOldSwapchain = value; m->OldSwapchain = (UInt64)value.m; }
		}
	}

	unsafe public class PresentInfoKhr
	{
		internal Interop.PresentInfoKhr* m;

		public PresentInfoKhr ()
		{
			m = (Interop.PresentInfoKhr*) Interop.Structure.Allocate (typeof (Interop.PresentInfoKhr));
			m->SType = StructureType.PresentInfoKhr;
		}

		public UInt32 WaitSemaphoreCount {
			get { return m->WaitSemaphoreCount; }
			set { m->WaitSemaphoreCount = value; }
		}

		Semaphore lWaitSemaphores;
		public Semaphore WaitSemaphores {
			get { return lWaitSemaphores; }
			set { lWaitSemaphores = value; m->WaitSemaphores = (UInt64)value.m; }
		}

		public UInt32 SwapchainCount {
			get { return m->SwapchainCount; }
			set { m->SwapchainCount = value; }
		}

		SwapchainKhr lSwapchains;
		public SwapchainKhr Swapchains {
			get { return lSwapchains; }
			set { lSwapchains = value; m->Swapchains = (UInt64)value.m; }
		}

		public UInt32[] ImageIndices {
			get {
				var values = new UInt32 [m->SwapchainCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->ImageIndices;
					for (int i = 0; i < m->SwapchainCount; i++)
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				m->SwapchainCount = (uint)value.Length;
				m->ImageIndices = Marshal.AllocHGlobal ((int)(sizeof(UInt32)*m->SwapchainCount));
				unsafe
				{
					UInt32* ptr = (UInt32*)m->ImageIndices;
					for (int i = 0; i < m->SwapchainCount; i++)
						ptr [i] = value [i];
				}
			}
		}

		public Result Results {
			get { return m->Results; }
			set { m->Results = value; }
		}
	}

	unsafe public class DebugReportCallbackCreateInfoExt
	{
		internal Interop.DebugReportCallbackCreateInfoExt* m;

		public DebugReportCallbackCreateInfoExt ()
		{
			m = (Interop.DebugReportCallbackCreateInfoExt*) Interop.Structure.Allocate (typeof (Interop.DebugReportCallbackCreateInfoExt));
			m->SType = StructureType.DebugReportCallbackCreateInfoExt;
		}

		public DebugReportFlagsExt Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public IntPtr PfnCallback {
			get { return m->PfnCallback; }
			set { m->PfnCallback = value; }
		}

		public IntPtr UserData {
			get { return m->UserData; }
			set { m->UserData = value; }
		}
	}

	unsafe public class PipelineRasterizationStateRasterizationOrderAmd
	{
		internal Interop.PipelineRasterizationStateRasterizationOrderAmd* m;

		public PipelineRasterizationStateRasterizationOrderAmd ()
		{
			m = (Interop.PipelineRasterizationStateRasterizationOrderAmd*) Interop.Structure.Allocate (typeof (Interop.PipelineRasterizationStateRasterizationOrderAmd));
			m->SType = StructureType.PipelineRasterizationStateRasterizationOrderAmd;
		}

		public RasterizationOrderAmd RasterizationOrder {
			get { return m->RasterizationOrder; }
			set { m->RasterizationOrder = value; }
		}
	}

	unsafe public class DebugMarkerObjectNameInfoExt
	{
		internal Interop.DebugMarkerObjectNameInfoExt* m;

		public DebugMarkerObjectNameInfoExt ()
		{
			m = (Interop.DebugMarkerObjectNameInfoExt*) Interop.Structure.Allocate (typeof (Interop.DebugMarkerObjectNameInfoExt));
			m->SType = StructureType.DebugMarkerObjectNameInfoExt;
		}

		public DebugReportObjectTypeExt ObjectType {
			get { return m->ObjectType; }
			set { m->ObjectType = value; }
		}

		public UInt64 Object {
			get { return m->Object; }
			set { m->Object = value; }
		}

		public string ObjectName {
			get { return Marshal.PtrToStringAnsi (m->ObjectName); }
			set { m->ObjectName = Marshal.StringToHGlobalAnsi (value); }
		}
	}

	unsafe public class DebugMarkerObjectTagInfoExt
	{
		internal Interop.DebugMarkerObjectTagInfoExt* m;

		public DebugMarkerObjectTagInfoExt ()
		{
			m = (Interop.DebugMarkerObjectTagInfoExt*) Interop.Structure.Allocate (typeof (Interop.DebugMarkerObjectTagInfoExt));
			m->SType = StructureType.DebugMarkerObjectTagInfoExt;
		}

		public DebugReportObjectTypeExt ObjectType {
			get { return m->ObjectType; }
			set { m->ObjectType = value; }
		}

		public UInt64 Object {
			get { return m->Object; }
			set { m->Object = value; }
		}

		public UInt64 TagName {
			get { return m->TagName; }
			set { m->TagName = value; }
		}

		public UIntPtr TagSize {
			get { return m->TagSize; }
			set { m->TagSize = value; }
		}

		public IntPtr Tag {
			get { return m->Tag; }
			set { m->Tag = value; }
		}
	}

	unsafe public class DebugMarkerMarkerInfoExt
	{
		internal Interop.DebugMarkerMarkerInfoExt* m;

		public DebugMarkerMarkerInfoExt ()
		{
			m = (Interop.DebugMarkerMarkerInfoExt*) Interop.Structure.Allocate (typeof (Interop.DebugMarkerMarkerInfoExt));
			m->SType = StructureType.DebugMarkerMarkerInfoExt;
		}

		public string MarkerName {
			get { return Marshal.PtrToStringAnsi (m->MarkerName); }
			set { m->MarkerName = Marshal.StringToHGlobalAnsi (value); }
		}

		public float Color {
			get { return m->Color; }
			set { m->Color = value; }
		}
	}
}
